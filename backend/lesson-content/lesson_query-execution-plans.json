{
    "id": "query-execution-plans",
    "title": "Query Execution Plans",
    "category": "Database Design & Perf",
    "difficulty": "Advanced",
    "estimatedTime": "30 min",
    "starterQuery": "/* This is a conceptual lesson on reading execution plans.\n   The EXPLAIN command shows how the database will execute a query. */\n\n-- In SQLite, you can use:\nEXPLAIN QUERY PLAN\nSELECT * FROM users WHERE last_name = 'Smith';",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is an Execution Plan?\nAn execution plan (or query plan) is the step-by-step roadmap that the database's query optimizer decides to follow to retrieve the data for your query. It's like the database showing you its 'work' and revealing its strategy."
        },
        {
            "type": "paragraph",
            "text": "2. Why is it the key to performance tuning?\nBy analyzing the execution plan using a command like `EXPLAIN` or `EXPLAIN QUERY PLAN`, you can identify performance bottlenecks. If you see a 'Full Table Scan' on a large table, you immediately know that the query is inefficient and likely needs a better index."
        },
        {
            "type": "paragraph",
            "text": "3. What are common operations in a plan?\nDifferent databases show different operations, but some common ones include `TABLE SCAN`, `INDEX SCAN`, and `INDEX SEEK`. Understanding the difference is crucial for optimization."
        },
        {
            "type": "table",
            "columns": [
                "Operation",
                "What it means",
                "Performance"
            ],
            "rows": [
                [
                    "Full Table Scan",
                    "Reads every single row in the table to find matches.",
                    "Very slow on large tables."
                ],
                [
                    "Index Scan",
                    "Scans all or a large part of an index.",
                    "Faster than a table scan, but not ideal."
                ],
                [
                    "Index Seek",
                    "Uses the index to go directly to the required rows.",
                    "Very fast; this is usually what you want to see."
                ]
            ]
        },
        {
            "type": "paragraph",
            "text": "4. How do JOINs appear in a plan?\nJoins also have different strategies. A `NESTED LOOP` join is efficient for small tables. A `HASH JOIN` is good for large, unsorted datasets. A `MERGE JOIN` is effective when both datasets are already sorted on the join key. The optimizer chooses the best one based on table sizes and available indexes."
        },
        {
            "type": "note",
            "text": "The goal of analyzing an execution plan is to confirm that the database is using the indexes you expect it to use. If it's not, your query might not be 'SARGable', or the index might not be selective enough."
        }
    ],
    "schema": {
        "tables": []
    },
    "sample_data": {},
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic Query Execution Plans Query",
            "description": "Practice the fundamental concepts of Query Execution Plans.",
            "starterCode": "-- Practice Query Execution Plans\n-- Write your query here",
            "solution": "-- Solution will depend on the specific Query Execution Plans lesson",
            "hint": "Review the Query Execution Plans syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating Query Execution Plans functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate Query Execution Plans",
            "description": "Apply Query Execution Plans with additional complexity.",
            "starterCode": "-- Intermediate Query Execution Plans practice\n-- Your code here",
            "solution": "-- More complex Query Execution Plans solution",
            "hint": "Combine Query Execution Plans with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using Query Execution Plans."
        },
        {
            "id": "practice_3",
            "title": "Advanced Query Execution Plans",
            "description": "Master advanced Query Execution Plans techniques.",
            "starterCode": "-- Advanced Query Execution Plans practice\n-- Your advanced query here",
            "solution": "-- Advanced Query Execution Plans solution",
            "hint": "Think about edge cases and optimization for Query Execution Plans.",
            "expectedOutput": "Advanced Query Execution Plans results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world Query Execution Plans",
            "description": "Apply Query Execution Plans to solve a realistic business problem.",
            "starterCode": "-- Real-world Query Execution Plans scenario\n-- Solve the business problem",
            "solution": "-- Business-focused Query Execution Plans solution",
            "hint": "Consider how Query Execution Plans would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "challenges": [],
    "quiz": [
        {
            "id": "query-execution-plans_q1",
            "type": "mcq",
            "question": "What is the primary purpose of Query Execution Plans?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement Query Execution Plans functionality",
                "To create database backups"
            ],
            "answer": "To implement Query Execution Plans functionality",
            "explanation": "Query Execution Plans is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "query-execution-plans_q2",
            "type": "truefalse",
            "question": "Query Execution Plans can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including Query Execution Plans can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "query-execution-plans_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using Query Execution Plans?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using Query Execution Plans, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "query-execution-plans_q4",
            "type": "truefalse",
            "question": "Query Execution Plans is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "query-execution-plans_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with Query Execution Plans?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "query-execution-plans_q6",
            "type": "mcq",
            "question": "When learning Query Execution Plans, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "query-execution-plans_q7",
            "type": "truefalse",
            "question": "Understanding Query Execution Plans is important for database professionals.",
            "answer": true,
            "explanation": "Query Execution Plans is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "query-execution-plans_q8",
            "type": "mcq",
            "question": "What should you do before using Query Execution Plans in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ]
}