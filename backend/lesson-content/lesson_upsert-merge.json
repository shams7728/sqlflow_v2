{
    "id": "upsert-merge",
    "title": "UPSERT / MERGE",
    "category": "Data Modification",
    "difficulty": "Advanced",
    "estimatedTime": "20 min",
    "starterQuery": "/* Let's update the inventory for product_id 101, or insert it if it's new. */\n\nINSERT INTO product_inventory (product_id, stock_count)\nVALUES (101, 75)\nON CONFLICT(product_id) DO UPDATE SET\n  stock_count = excluded.stock_count;",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is an UPSERT?\nAn 'UPSERT' (a portmanteau of UPDATE and INSERT) is a database operation that inserts rows into a table if they do not already exist, or updates them if they do. This is also commonly known as a `MERGE` operation in some database systems."
        },
        {
            "type": "paragraph",
            "text": "2. Why is it useful?\nUpserting is incredibly efficient for synchronizing data. Instead of writing complex application logic to first `SELECT` a row to see if it exists, and then deciding whether to `INSERT` or `UPDATE`, you can do it all in a single, atomic database command."
        },
        {
            "type": "paragraph",
            "text": "3. What is the syntax in SQLite?\nSQLite implements this using the `ON CONFLICT` clause with an `INSERT` statement. The syntax is `INSERT INTO table (...) VALUES (...) ON CONFLICT(target_column) DO UPDATE SET ...;`."
        },
        {
            "type": "paragraph",
            "text": "4. How does `ON CONFLICT` work?\nYou specify a column (or columns) that has a `UNIQUE` or `PRIMARY KEY` constraint. If the `INSERT` statement would violate this constraint (meaning the row already exists), the `DO UPDATE` part of the command is executed instead. You can reference the values from the attempted `INSERT` using the special `excluded` table."
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "product_inventory",
                "columns": [
                    {
                        "name": "product_id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "product_name",
                        "type": "TEXT"
                    },
                    {
                        "name": "stock_count",
                        "type": "INTEGER",
                        "constraints": "NOT NULL"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "product_inventory": [
            {
                "product_id": 101,
                "product_name": "Laptop",
                "stock_count": 50
            },
            {
                "product_id": 102,
                "product_name": "Mouse",
                "stock_count": 200
            }
        ]
    },
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic UPSERT / MERGE Query",
            "description": "Practice the fundamental concepts of UPSERT / MERGE.",
            "starterCode": "-- Practice UPSERT / MERGE\n-- Write your query here",
            "solution": "-- Solution will depend on the specific UPSERT / MERGE lesson",
            "hint": "Review the UPSERT / MERGE syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating UPSERT / MERGE functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate UPSERT / MERGE",
            "description": "Apply UPSERT / MERGE with additional complexity.",
            "starterCode": "-- Intermediate UPSERT / MERGE practice\n-- Your code here",
            "solution": "-- More complex UPSERT / MERGE solution",
            "hint": "Combine UPSERT / MERGE with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using UPSERT / MERGE."
        },
        {
            "id": "practice_3",
            "title": "Advanced UPSERT / MERGE",
            "description": "Master advanced UPSERT / MERGE techniques.",
            "starterCode": "-- Advanced UPSERT / MERGE practice\n-- Your advanced query here",
            "solution": "-- Advanced UPSERT / MERGE solution",
            "hint": "Think about edge cases and optimization for UPSERT / MERGE.",
            "expectedOutput": "Advanced UPSERT / MERGE results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world UPSERT / MERGE",
            "description": "Apply UPSERT / MERGE to solve a realistic business problem.",
            "starterCode": "-- Real-world UPSERT / MERGE scenario\n-- Solve the business problem",
            "solution": "-- Business-focused UPSERT / MERGE solution",
            "hint": "Consider how UPSERT / MERGE would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "quiz": [
        {
            "id": "upsert-merge_q1",
            "type": "mcq",
            "question": "What is the primary purpose of UPSERT / MERGE?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement UPSERT / MERGE functionality",
                "To create database backups"
            ],
            "answer": "To implement UPSERT / MERGE functionality",
            "explanation": "UPSERT / MERGE is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "upsert-merge_q2",
            "type": "truefalse",
            "question": "UPSERT / MERGE can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including UPSERT / MERGE can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "upsert-merge_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using UPSERT / MERGE?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using UPSERT / MERGE, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "upsert-merge_q4",
            "type": "truefalse",
            "question": "UPSERT / MERGE is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "upsert-merge_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with UPSERT / MERGE?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "upsert-merge_q6",
            "type": "mcq",
            "question": "When learning UPSERT / MERGE, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "upsert-merge_q7",
            "type": "truefalse",
            "question": "Understanding UPSERT / MERGE is important for database professionals.",
            "answer": true,
            "explanation": "UPSERT / MERGE is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "upsert-merge_q8",
            "type": "mcq",
            "question": "What should you do before using UPSERT / MERGE in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "upsert_ch1",
            "title": "Update User Scores",
            "steps": [
                {
                    "stepId": "upsert_ch1_step1",
                    "description": "Imagine a `user_scores` table with `user_id` (PRIMARY KEY) and `score`. A user with `user_id` 5 just got a new score of 1500. Write an upsert statement to either insert their new record or update their existing one.",
                    "solution": "INSERT INTO user_scores (user_id, score) VALUES (5, 1500) ON CONFLICT(user_id) DO UPDATE SET score = excluded.score;"
                }
            ]
        },
        {
            "id": "upsert_ch2",
            "title": "Increment a Value on Conflict",
            "steps": [
                {
                    "stepId": "upsert_ch2_step1",
                    "description": "The `product_inventory` table needs to be updated. For `product_id` 102, you want to add 50 to the current stock. Write an upsert statement that increments the `stock_count` if the product exists.",
                    "solution": "INSERT INTO product_inventory (product_id, stock_count) VALUES (102, 50) ON CONFLICT(product_id) DO UPDATE SET stock_count = stock_count + excluded.stock_count;"
                }
            ]
        }
    ]
}