{
    "id": "having",
    "title": "HAVING Clause",
    "category": "Grouping",
    "difficulty": "Intermediate",
    "estimatedTime": "10 min",
    "starterQuery": "SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 2;",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is the HAVING Clause?\nThe HAVING clause in SQL is used to filter groups created by the GROUP BY clause based on aggregate conditions. Unlike WHERE, which filters individual rows, HAVING applies conditions to grouped rows."
        },
        {
            "type": "paragraph",
            "text": "2. Why use HAVING?\nWhen you want to filter groups after aggregation (e.g., departments with more than 2 employees), HAVING provides a way to refine the results of GROUP BY queries using aggregate functions like COUNT(), SUM(), AVG()."
        },
        {
            "type": "paragraph",
            "text": "3. Where is HAVING used?\nIt follows the GROUP BY clause in SQL queries. It's especially useful in reporting and analytics where summaries and totals are filtered."
        },
        {
            "type": "paragraph",
            "text": "4. How to use the HAVING Clause?\nUse it in combination with GROUP BY and aggregate functions. Example: SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 2;"
        },
        {
            "type": "table",
            "columns": [
                "Clause",
                "Usage"
            ],
            "rows": [
                [
                    "WHERE",
                    "Filters rows before grouping"
                ],
                [
                    "HAVING",
                    "Filters groups after aggregation"
                ],
                [
                    "GROUP BY",
                    "Groups rows by one or more columns"
                ]
            ]
        },
        {
            "type": "note",
            "text": "HAVING is necessary when you need to filter based on aggregated values. It cannot replace WHERE for filtering rows."
        },
        {
            "type": "code",
            "text": "SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 2;"
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "employees",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT",
                        "constraints": "NOT NULL"
                    },
                    {
                        "name": "department",
                        "type": "TEXT"
                    },
                    {
                        "name": "salary",
                        "type": "INTEGER"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "employees": [
            {
                "id": 1,
                "name": "Alice",
                "department": "Sales",
                "salary": 50000
            },
            {
                "id": 2,
                "name": "Bob",
                "department": "Sales",
                "salary": 52000
            },
            {
                "id": 3,
                "name": "Charlie",
                "department": "HR",
                "salary": 47000
            },
            {
                "id": 4,
                "name": "Diana",
                "department": "Sales",
                "salary": 51000
            },
            {
                "id": 5,
                "name": "Eve",
                "department": "HR",
                "salary": 48000
            },
            {
                "id": 6,
                "name": "Frank",
                "department": "IT",
                "salary": 60000
            }
        ]
    },
    "examples": [
        {
            "query": "SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 2;",
            "description": "Departments with more than 2 employees",
            "explanation": "Groups employees by department and filters to show only departments that have more than two employees."
        },
        {
            "query": "SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 50000;",
            "description": "Departments with average salary above 50,000",
            "explanation": "Shows departments where the average salary exceeds 50,000."
        }
    ],
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic HAVING Clause Query",
            "description": "Practice the fundamental concepts of HAVING Clause.",
            "starterCode": "-- Practice HAVING Clause\n-- Write your query here",
            "solution": "-- Solution will depend on the specific HAVING Clause lesson",
            "hint": "Review the HAVING Clause syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating HAVING Clause functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate HAVING Clause",
            "description": "Apply HAVING Clause with additional complexity.",
            "starterCode": "-- Intermediate HAVING Clause practice\n-- Your code here",
            "solution": "-- More complex HAVING Clause solution",
            "hint": "Combine HAVING Clause with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using HAVING Clause."
        },
        {
            "id": "practice_3",
            "title": "Advanced HAVING Clause",
            "description": "Master advanced HAVING Clause techniques.",
            "starterCode": "-- Advanced HAVING Clause practice\n-- Your advanced query here",
            "solution": "-- Advanced HAVING Clause solution",
            "hint": "Think about edge cases and optimization for HAVING Clause.",
            "expectedOutput": "Advanced HAVING Clause results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world HAVING Clause",
            "description": "Apply HAVING Clause to solve a realistic business problem.",
            "starterCode": "-- Real-world HAVING Clause scenario\n-- Solve the business problem",
            "solution": "-- Business-focused HAVING Clause solution",
            "hint": "Consider how HAVING Clause would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "quiz": [
        {
            "id": "having_q1",
            "type": "mcq",
            "question": "What is the primary purpose of HAVING Clause?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement HAVING Clause functionality",
                "To create database backups"
            ],
            "answer": "To implement HAVING Clause functionality",
            "explanation": "HAVING Clause is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "having_q2",
            "type": "truefalse",
            "question": "HAVING Clause can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including HAVING Clause can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "having_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using HAVING Clause?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using HAVING Clause, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "having_q4",
            "type": "truefalse",
            "question": "HAVING Clause is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "having_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with HAVING Clause?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "having_q6",
            "type": "mcq",
            "question": "When learning HAVING Clause, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "having_q7",
            "type": "truefalse",
            "question": "Understanding HAVING Clause is important for database professionals.",
            "answer": true,
            "explanation": "HAVING Clause is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "having_q8",
            "type": "mcq",
            "question": "What should you do before using HAVING Clause in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "having_ch1",
            "title": "Grouped Filters",
            "steps": [
                {
                    "stepId": "having_ch1_step1",
                    "description": "Step 1: List departments with more than 2 employees.",
                    "solution": "SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 2;"
                },
                {
                    "stepId": "having_ch1_step2",
                    "description": "Step 2: List departments with average salary over 50,000.",
                    "solution": "SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 50000;"
                }
            ]
        }
    ]
}