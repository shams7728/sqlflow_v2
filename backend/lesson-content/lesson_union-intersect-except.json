{
    "id": "union-intersect-except",
    "title": "UNION, INTERSECT, EXCEPT",
    "category": "Subqueries & Set Ops",
    "difficulty": "Intermediate",
    "estimatedTime": "20 min",
    "starterQuery": "-- Get a unique list of all customers from both cities\nSELECT name FROM london_customers\nUNION\nSELECT name FROM paris_customers;",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What are Set Operators?\nSet operators are used to combine the results of two or more `SELECT` statements into a single result set. The main operators are `UNION`, `UNION ALL`, `INTERSECT`, and `EXCEPT`."
        },
        {
            "type": "paragraph",
            "text": "2. What is UNION vs. UNION ALL?\n`UNION` combines the result sets and removes all duplicate rows. `UNION ALL` also combines the result sets but includes all duplicate rows. `UNION ALL` is faster because it doesn't have to check for duplicates."
        },
        {
            "type": "paragraph",
            "text": "3. What is INTERSECT?\n`INTERSECT` returns only the rows that appear in both result sets. It's a way to find the common entries between two queries."
        },
        {
            "type": "paragraph",
            "text": "4. What is EXCEPT?\n`EXCEPT` returns the rows from the first query's result set that do not appear in the second query's result set. It's a way to find the difference between two sets."
        },
        {
            "type": "note",
            "text": "Important Rule: For all set operators, the `SELECT` statements being combined must have the same number of columns in the same order, and the data types of corresponding columns must be compatible."
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "london_customers",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT"
                    }
                ]
            },
            {
                "name": "paris_customers",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "london_customers": [
            {
                "id": 1,
                "name": "John Smith"
            },
            {
                "id": 2,
                "name": "Jane Doe"
            },
            {
                "id": 3,
                "name": "David Williams"
            }
        ],
        "paris_customers": [
            {
                "id": 1,
                "name": "Jane Doe"
            },
            {
                "id": 2,
                "name": "Mary Adams"
            },
            {
                "id": 3,
                "name": "David Williams"
            }
        ]
    },
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic UNION, INTERSECT, EXCEPT Query",
            "description": "Practice the fundamental concepts of UNION, INTERSECT, EXCEPT.",
            "starterCode": "-- Practice UNION, INTERSECT, EXCEPT\n-- Write your query here",
            "solution": "-- Solution will depend on the specific UNION, INTERSECT, EXCEPT lesson",
            "hint": "Review the UNION, INTERSECT, EXCEPT syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating UNION, INTERSECT, EXCEPT functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate UNION, INTERSECT, EXCEPT",
            "description": "Apply UNION, INTERSECT, EXCEPT with additional complexity.",
            "starterCode": "-- Intermediate UNION, INTERSECT, EXCEPT practice\n-- Your code here",
            "solution": "-- More complex UNION, INTERSECT, EXCEPT solution",
            "hint": "Combine UNION, INTERSECT, EXCEPT with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using UNION, INTERSECT, EXCEPT."
        },
        {
            "id": "practice_3",
            "title": "Advanced UNION, INTERSECT, EXCEPT",
            "description": "Master advanced UNION, INTERSECT, EXCEPT techniques.",
            "starterCode": "-- Advanced UNION, INTERSECT, EXCEPT practice\n-- Your advanced query here",
            "solution": "-- Advanced UNION, INTERSECT, EXCEPT solution",
            "hint": "Think about edge cases and optimization for UNION, INTERSECT, EXCEPT.",
            "expectedOutput": "Advanced UNION, INTERSECT, EXCEPT results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world UNION, INTERSECT, EXCEPT",
            "description": "Apply UNION, INTERSECT, EXCEPT to solve a realistic business problem.",
            "starterCode": "-- Real-world UNION, INTERSECT, EXCEPT scenario\n-- Solve the business problem",
            "solution": "-- Business-focused UNION, INTERSECT, EXCEPT solution",
            "hint": "Consider how UNION, INTERSECT, EXCEPT would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "quiz": [
        {
            "id": "union-intersect-except_q1",
            "type": "mcq",
            "question": "What is the primary purpose of UNION, INTERSECT, EXCEPT?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement UNION, INTERSECT, EXCEPT functionality",
                "To create database backups"
            ],
            "answer": "To implement UNION, INTERSECT, EXCEPT functionality",
            "explanation": "UNION, INTERSECT, EXCEPT is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "union-intersect-except_q2",
            "type": "truefalse",
            "question": "UNION, INTERSECT, EXCEPT can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including UNION, INTERSECT, EXCEPT can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "union-intersect-except_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using UNION, INTERSECT, EXCEPT?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using UNION, INTERSECT, EXCEPT, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "union-intersect-except_q4",
            "type": "truefalse",
            "question": "UNION, INTERSECT, EXCEPT is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "union-intersect-except_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with UNION, INTERSECT, EXCEPT?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "union-intersect-except_q6",
            "type": "mcq",
            "question": "When learning UNION, INTERSECT, EXCEPT, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "union-intersect-except_q7",
            "type": "truefalse",
            "question": "Understanding UNION, INTERSECT, EXCEPT is important for database professionals.",
            "answer": true,
            "explanation": "UNION, INTERSECT, EXCEPT is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "union-intersect-except_q8",
            "type": "mcq",
            "question": "What should you do before using UNION, INTERSECT, EXCEPT in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "setops_ch1",
            "title": "Create a Master Customer List",
            "steps": [
                {
                    "stepId": "setops_ch1_step1",
                    "description": "Write a query using `UNION` to get a single, combined list of all unique customer names from both the London and Paris tables.",
                    "solution": "SELECT name FROM london_customers UNION SELECT name FROM paris_customers;"
                }
            ]
        },
        {
            "id": "setops_ch2",
            "title": "Audit All Customer Records",
            "steps": [
                {
                    "stepId": "setops_ch2_step1",
                    "description": "To see every single record from both tables, including duplicates, combine the two customer tables using `UNION ALL`.",
                    "solution": "SELECT name FROM london_customers UNION ALL SELECT name FROM paris_customers;"
                }
            ]
        }
    ]
}