{
    "id": "sql-anti-patterns",
    "title": "SQL Anti-Patterns",
    "category": "Database Design & Perf",
    "difficulty": "Advanced",
    "estimatedTime": "30 min",
    "starterQuery": "/* This is a conceptual lesson on common SQL mistakes. */",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is an Anti-Pattern?\nAn anti-pattern is a common response to a recurring problem that is usually ineffective and risks being counterproductive. In SQL, these are common mistakes in database design or query writing that lead to poor performance, data integrity issues, and maintenance nightmares."
        },
        {
            "type": "paragraph",
            "text": "2. Anti-Pattern: Storing Comma-Separated Lists\nOne of the most common mistakes is storing multiple values in a single text column (e.g., a `tags` column with 'sql,python,database'). This violates normalization, makes searching for a single tag extremely difficult and inefficient, and makes joining to a `tags` table impossible."
        },
        {
            "type": "code",
            "text": "-- BAD: Storing a list\n-- CREATE TABLE posts (id INT, title TEXT, tags TEXT);\n-- INSERT INTO posts VALUES (1, 'My Post', 'sql,database,performance');\n\n-- GOOD: Using a separate junction table (Normalized)\n-- CREATE TABLE posts (id INT, title TEXT);\n-- CREATE TABLE tags (id INT, name TEXT);\n-- CREATE TABLE post_tags (post_id INT, tag_id INT);"
        },
        {
            "type": "paragraph",
            "text": "3. Anti-Pattern: Fear of Indexes\nSome developers avoid creating indexes because they slow down write operations (`INSERT`, `UPDATE`). While this is true, the performance gain on `SELECT` queries is almost always worth the trade-off for any column that is frequently used for filtering (`WHERE`) or joining (`ON`). Not indexing foreign keys is a particularly bad oversight."
        },
        {
            "type": "paragraph",
            "text": "4. Anti-Pattern: Using `SELECT *` in Production Code\nWhile convenient for quick checks, `SELECT *` is harmful in application code. It retrieves more data than necessary, increasing network traffic. More importantly, if the table schema changes (e.g., a column is added), it can break the application code that expects a specific number or order of columns."
        },
        {
            "type": "paragraph",
            "text": "5. Anti-Pattern: Using `HAVING` as a `WHERE` Clause\n`WHERE` filters individual rows *before* they are grouped. `HAVING` filters groups *after* they have been created by `GROUP BY`. Using `HAVING` to do the job of `WHERE` is inefficient because the database has to group all the rows first and then filter them, instead of filtering the rows down to a smaller set before grouping."
        },
        {
            "type": "code",
            "text": "-- BAD: Using HAVING to filter rows\n-- SELECT category, COUNT(*) FROM products GROUP BY category HAVING category = 'Electronics';\n\n-- GOOD: Using WHERE to filter rows first\n-- SELECT category, COUNT(*) FROM products WHERE category = 'Electronics' GROUP BY category;"
        }
    ],
    "schema": {
        "tables": []
    },
    "sample_data": {},
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic SQL Anti-Patterns Query",
            "description": "Practice the fundamental concepts of SQL Anti-Patterns.",
            "starterCode": "-- Practice SQL Anti-Patterns\n-- Write your query here",
            "solution": "-- Solution will depend on the specific SQL Anti-Patterns lesson",
            "hint": "Review the SQL Anti-Patterns syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating SQL Anti-Patterns functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate SQL Anti-Patterns",
            "description": "Apply SQL Anti-Patterns with additional complexity.",
            "starterCode": "-- Intermediate SQL Anti-Patterns practice\n-- Your code here",
            "solution": "-- More complex SQL Anti-Patterns solution",
            "hint": "Combine SQL Anti-Patterns with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using SQL Anti-Patterns."
        },
        {
            "id": "practice_3",
            "title": "Advanced SQL Anti-Patterns",
            "description": "Master advanced SQL Anti-Patterns techniques.",
            "starterCode": "-- Advanced SQL Anti-Patterns practice\n-- Your advanced query here",
            "solution": "-- Advanced SQL Anti-Patterns solution",
            "hint": "Think about edge cases and optimization for SQL Anti-Patterns.",
            "expectedOutput": "Advanced SQL Anti-Patterns results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world SQL Anti-Patterns",
            "description": "Apply SQL Anti-Patterns to solve a realistic business problem.",
            "starterCode": "-- Real-world SQL Anti-Patterns scenario\n-- Solve the business problem",
            "solution": "-- Business-focused SQL Anti-Patterns solution",
            "hint": "Consider how SQL Anti-Patterns would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "challenges": [],
    "quiz": [
        {
            "id": "sql-anti-patterns_q1",
            "type": "mcq",
            "question": "What is the primary purpose of SQL Anti-Patterns?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement SQL Anti-Patterns functionality",
                "To create database backups"
            ],
            "answer": "To implement SQL Anti-Patterns functionality",
            "explanation": "SQL Anti-Patterns is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "sql-anti-patterns_q2",
            "type": "truefalse",
            "question": "SQL Anti-Patterns can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including SQL Anti-Patterns can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "sql-anti-patterns_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using SQL Anti-Patterns?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using SQL Anti-Patterns, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "sql-anti-patterns_q4",
            "type": "truefalse",
            "question": "SQL Anti-Patterns is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "sql-anti-patterns_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with SQL Anti-Patterns?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "sql-anti-patterns_q6",
            "type": "mcq",
            "question": "When learning SQL Anti-Patterns, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "sql-anti-patterns_q7",
            "type": "truefalse",
            "question": "Understanding SQL Anti-Patterns is important for database professionals.",
            "answer": true,
            "explanation": "SQL Anti-Patterns is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "sql-anti-patterns_q8",
            "type": "mcq",
            "question": "What should you do before using SQL Anti-Patterns in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ]
}