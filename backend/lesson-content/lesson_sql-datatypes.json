{
    "id": "sql-datatypes",
    "title": "SQL Data Types",
    "category": "Getting Started",
    "difficulty": "Beginner",
    "estimatedTime": "12 min",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What are SQL Data Types?\nSQL Data Types define the kind of values that can be stored in a column. Each column in a table is assigned a specific data type which determines the nature of the data it can hold."
        },
        {
            "type": "paragraph",
            "text": "2. Why are Data Types Important?\nData types ensure data integrity, optimize storage, and improve performance. Choosing the right type prevents invalid data and improves query efficiency."
        },
        {
            "type": "paragraph",
            "text": "3. Where are Data Types Used?\nData types are defined when creating a table and affect how values are stored and validated. For example: `CREATE TABLE users (id INTEGER, name TEXT);`"
        },
        {
            "type": "paragraph",
            "text": "4. How Do You Choose the Right Data Type?\nBase it on the nature of the data: use INTEGER for whole numbers, TEXT for names or messages, DATETIME for timestamps, etc."
        },
        {
            "type": "table",
            "columns": [
                "Data Type",
                "Description"
            ],
            "rows": [
                [
                    "INTEGER",
                    "Stores whole numbers (e.g., 1, 42, 999)"
                ],
                [
                    "REAL",
                    "Stores floating-point numbers (e.g., 3.14, 2.718)"
                ],
                [
                    "TEXT",
                    "Stores string values (e.g., 'Alice', 'hello')"
                ],
                [
                    "BLOB",
                    "Stores binary data such as images or files"
                ],
                [
                    "BOOLEAN",
                    "Stores true/false as 0/1 (SQLite only supports INTEGER 0/1)"
                ],
                [
                    "DATE",
                    "Stores date values (e.g., '2023-07-15')"
                ],
                [
                    "DATETIME",
                    "Stores date and time values (e.g., '2023-07-15 14:30:00')"
                ]
            ]
        },
        {
            "type": "note",
            "text": "SQLite is flexible with data types. You can insert a string into an INTEGER column, but it's not recommended for data consistency."
        },
        {
            "type": "code",
            "text": "CREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  username TEXT NOT NULL,\n  email TEXT NOT NULL,\n  age INTEGER,\n  created_at DATETIME,\n  is_active BOOLEAN\n);"
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "users",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "username",
                        "type": "TEXT",
                        "constraints": "NOT NULL"
                    },
                    {
                        "name": "email",
                        "type": "TEXT",
                        "constraints": "NOT NULL"
                    },
                    {
                        "name": "age",
                        "type": "INTEGER"
                    },
                    {
                        "name": "created_at",
                        "type": "DATETIME"
                    },
                    {
                        "name": "is_active",
                        "type": "BOOLEAN"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "users": [
            {
                "id": 1,
                "username": "alice",
                "email": "alice@example.com",
                "age": 25,
                "created_at": "2023-01-01 10:00:00",
                "is_active": 1
            },
            {
                "id": 2,
                "username": "bob",
                "email": "bob@example.com",
                "age": 30,
                "created_at": "2023-02-10 14:30:00",
                "is_active": 0
            },
            {
                "id": 3,
                "username": "charlie",
                "email": "charlie@example.com",
                "age": 22,
                "created_at": "2023-03-15 09:15:00",
                "is_active": 1
            }
        ]
    },
    "starterQuery": "SELECT * FROM users;",
    "examples": [
        {
            "query": "SELECT username, age FROM users;",
            "description": "Access text and integer columns",
            "explanation": "Retrieves usernames and ages from the users table."
        },
        {
            "query": "SELECT * FROM users WHERE is_active = 1;",
            "description": "Filter by boolean column",
            "explanation": "Shows only active users (is_active = 1)."
        }
    ],
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic SQL Data Types Query",
            "description": "Practice the fundamental concepts of SQL Data Types.",
            "starterCode": "-- Practice SQL Data Types\n-- Write your query here",
            "solution": "-- Solution will depend on the specific SQL Data Types lesson",
            "hint": "Review the SQL Data Types syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating SQL Data Types functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate SQL Data Types",
            "description": "Apply SQL Data Types with additional complexity.",
            "starterCode": "-- Intermediate SQL Data Types practice\n-- Your code here",
            "solution": "-- More complex SQL Data Types solution",
            "hint": "Combine SQL Data Types with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using SQL Data Types."
        },
        {
            "id": "practice_3",
            "title": "Advanced SQL Data Types",
            "description": "Master advanced SQL Data Types techniques.",
            "starterCode": "-- Advanced SQL Data Types practice\n-- Your advanced query here",
            "solution": "-- Advanced SQL Data Types solution",
            "hint": "Think about edge cases and optimization for SQL Data Types.",
            "expectedOutput": "Advanced SQL Data Types results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world SQL Data Types",
            "description": "Apply SQL Data Types to solve a realistic business problem.",
            "starterCode": "-- Real-world SQL Data Types scenario\n-- Solve the business problem",
            "solution": "-- Business-focused SQL Data Types solution",
            "hint": "Consider how SQL Data Types would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "quiz": [
        {
            "id": "sql-datatypes_q1",
            "type": "mcq",
            "question": "What is the primary purpose of SQL Data Types?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement SQL Data Types functionality",
                "To create database backups"
            ],
            "answer": "To implement SQL Data Types functionality",
            "explanation": "SQL Data Types is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "sql-datatypes_q2",
            "type": "truefalse",
            "question": "SQL Data Types can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including SQL Data Types can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "sql-datatypes_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using SQL Data Types?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using SQL Data Types, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "sql-datatypes_q4",
            "type": "truefalse",
            "question": "SQL Data Types is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "sql-datatypes_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with SQL Data Types?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "sql-datatypes_q6",
            "type": "mcq",
            "question": "When learning SQL Data Types, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "sql-datatypes_q7",
            "type": "truefalse",
            "question": "Understanding SQL Data Types is important for database professionals.",
            "answer": true,
            "explanation": "SQL Data Types is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "sql-datatypes_q8",
            "type": "mcq",
            "question": "What should you do before using SQL Data Types in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "sql-datatypes_ch1",
            "title": "User Age Analysis",
            "steps": [
                {
                    "stepId": "sql-datatypes_ch1_step1",
                    "description": "Step 1: Show usernames of users younger than 30.",
                    "solution": "SELECT username FROM users WHERE age < 30;"
                },
                {
                    "stepId": "sql-datatypes_ch1_step2",
                    "description": "Step 2: Count how many users are active.",
                    "solution": "SELECT COUNT(*) FROM users WHERE is_active = 1;"
                }
            ]
        }
    ]
}