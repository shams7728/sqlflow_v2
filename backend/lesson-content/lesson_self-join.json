{
    "id": "self-join",
    "title": "SELF JOIN",
    "category": "Joins",
    "difficulty": "Intermediate",
    "estimatedTime": "20 min",
    "starterQuery": "SELECT\n    e.name AS employee_name,\n    m.name AS manager_name\nFROM\n    employees e\nINNER JOIN\n    employees m ON e.manager_id = m.id;",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is a SELF JOIN?\nA SELF JOIN is a regular join, but the table is joined with itself. It's not a specific type of join, but rather a way of using standard joins (like INNER JOIN or LEFT JOIN) to relate rows within the same table."
        },
        {
            "type": "paragraph",
            "text": "2. Why use a SELF JOIN?\nIt is essential for querying hierarchical data or comparing rows within the same table. The most common use case is for tables that have a parent-child relationship, such as an 'employees' table where one column stores the ID of the employee's manager (who is also an employee in the same table)."
        },
        {
            "type": "paragraph",
            "text": "3. How does it work?\nTo perform a self-join, you must use table aliases to give the table two different temporary names. This allows you to treat the single table as two separate tables in your query, one for the 'employee' role and one for the 'manager' role, for example."
        },
        {
            "type": "paragraph",
            "text": "4. What is the syntax?\nYou list the same table twice in the `FROM` and `JOIN` clauses and assign each instance a unique alias (e.g., `e` for employees and `m` for managers). The `ON` condition then links the primary key of one alias to the foreign key (e.g., `manager_id`) of the other."
        },
        {
            "type": "image",
            "src": "/assests/self-join.png",
            "alt": "SELF JOIN Illustration"
        },
        {
            "type": "code",
            "text": "SELECT e.name, m.name AS manager\nFROM employees e\nJOIN employees m ON e.manager_id = m.id;"
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "employees",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT",
                        "constraints": "NOT NULL"
                    },
                    {
                        "name": "role",
                        "type": "TEXT"
                    },
                    {
                        "name": "manager_id",
                        "type": "INTEGER"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "employees": [
            {
                "id": 1,
                "name": "Alice",
                "role": "CEO",
                "manager_id": null
            },
            {
                "id": 2,
                "name": "Bob",
                "role": "Manager",
                "manager_id": 1
            },
            {
                "id": 3,
                "name": "Charlie",
                "role": "Manager",
                "manager_id": 1
            },
            {
                "id": 4,
                "name": "Diana",
                "role": "Engineer",
                "manager_id": 2
            },
            {
                "id": 5,
                "name": "Eve",
                "role": "Engineer",
                "manager_id": 2
            },
            {
                "id": 6,
                "name": "Frank",
                "role": "Sales",
                "manager_id": 3
            }
        ]
    },
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic JOIN",
            "description": "Write a basic JOIN query between two tables.",
            "starterCode": "-- Basic JOIN query\nSELECT \n-- Columns from both tables\nFROM table1\nJOIN table2 ON \n-- Join condition",
            "solution": "SELECT c.name, o.order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
            "hint": "Use table aliases and specify the join condition with ON.",
            "expectedOutput": "Combined data from both tables where the join condition matches."
        },
        {
            "id": "practice_2",
            "title": "JOIN with WHERE",
            "description": "Combine JOIN with WHERE clause for filtering.",
            "starterCode": "-- JOIN with filtering\nSELECT \n-- Your columns\nFROM table1 t1\nJOIN table2 t2 ON \n-- Join condition\nWHERE \n-- Filter condition",
            "solution": "SELECT c.name, o.total FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.total > 100;",
            "hint": "Add WHERE clause after the JOIN to filter the combined results.",
            "expectedOutput": "Joined data that also meets the WHERE condition."
        },
        {
            "id": "practice_3",
            "title": "Multiple JOINs",
            "description": "Join three or more tables together.",
            "starterCode": "-- Multiple JOINs\nSELECT \n-- Columns from multiple tables\nFROM table1 t1\nJOIN table2 t2 ON \n-- First join condition\nJOIN table3 t3 ON \n-- Second join condition",
            "solution": "SELECT c.name, o.order_date, p.product_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id;",
            "hint": "Chain multiple JOIN clauses, each with their own ON condition.",
            "expectedOutput": "Data combined from all joined tables."
        },
        {
            "id": "practice_4",
            "title": "Advanced JOIN Query",
            "description": "Create a comprehensive JOIN query with aliases and filtering.",
            "starterCode": "-- Advanced JOIN query\nSELECT \n-- Aliased columns\nFROM \n-- Multiple tables with aliases and joins\nWHERE \n-- Additional filtering",
            "solution": "SELECT c.name AS customer_name, COUNT(o.order_id) AS order_count FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;",
            "hint": "Combine JOINs with GROUP BY and aggregate functions for advanced analysis.",
            "expectedOutput": "Aggregated data showing relationships between tables."
        }
    ],
    "quiz": [
        {
            "id": "self-join_q1",
            "type": "mcq",
            "question": "What is the primary purpose of SELF JOIN?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement SELF JOIN functionality",
                "To create database backups"
            ],
            "answer": "To implement SELF JOIN functionality",
            "explanation": "SELF JOIN is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "self-join_q2",
            "type": "truefalse",
            "question": "SELF JOIN can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including SELF JOIN can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "self-join_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using SELF JOIN?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using SELF JOIN, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "self-join_q4",
            "type": "truefalse",
            "question": "SELF JOIN is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "self-join_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with SELF JOIN?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "self-join_q6",
            "type": "mcq",
            "question": "When learning SELF JOIN, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "self-join_q7",
            "type": "truefalse",
            "question": "Understanding SELF JOIN is important for database professionals.",
            "answer": true,
            "explanation": "SELF JOIN is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "self-join_q8",
            "type": "mcq",
            "question": "What should you do before using SELF JOIN in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "selfjoin_ch1",
            "title": "Show Employee-Manager Pairs",
            "steps": [
                {
                    "stepId": "selfjoin_ch1_step1",
                    "description": "Join the `employees` table to itself using aliases `e` (for employee) and `m` (for manager).",
                    "solution": "SELECT e.name, m.name FROM employees e JOIN employees m ON e.manager_id = m.id;"
                },
                {
                    "stepId": "selfjoin_ch1_step2",
                    "description": "Alias the output columns to be more descriptive, like `employee_name` and `manager_name`.",
                    "solution": "SELECT e.name AS employee_name, m.name AS manager_name FROM employees e JOIN employees m ON e.manager_id = m.id;"
                }
            ]
        },
        {
            "id": "selfjoin_ch2",
            "title": "Find Employees with the Same Manager",
            "steps": [
                {
                    "stepId": "selfjoin_ch2_step1",
                    "description": "Perform a self-join on the `employees` table where two different employees share the same `manager_id`. Use aliases `a` and `b`.",
                    "solution": "SELECT a.name, b.name, a.manager_id FROM employees a JOIN employees b ON a.manager_id = b.manager_id AND a.id <> b.id;"
                },
                {
                    "stepId": "selfjoin_ch2_step2",
                    "description": "To avoid duplicate pairs (like Alice, Bob and Bob, Alice), add a condition so that you only see pairs where the first employee's ID is less than the second's.",
                    "solution": "SELECT a.name, b.name, a.manager_id FROM employees a JOIN employees b ON a.manager_id = b.manager_id AND a.id < b.id;"
                }
            ]
        }
    ],
    "content": {
        "theory": {
            "concepts": [
                {
                    "id": "self-join-visual",
                    "title": "Visual Guide to SELF JOIN",
                    "content": "Joins a table with itself to find hierarchical relationships",
                    "visualDiagrams": [
                        {
                            "type": "hierarchy-diagram",
                            "joinType": "SELF JOIN",
                            "description": "Joins a table with itself to find hierarchical relationships",
                            "leftTable": "Employees (as Employee)",
                            "rightTable": "Employees (as Manager)",
                            "highlightedArea": "self-reference",
                            "example": {
                                "tableA": [
                                    {
                                        "id": 1,
                                        "name": "Alice",
                                        "manager_id": null
                                    },
                                    {
                                        "id": 2,
                                        "name": "Bob",
                                        "manager_id": 1
                                    },
                                    {
                                        "id": 3,
                                        "name": "Charlie",
                                        "manager_id": 1
                                    },
                                    {
                                        "id": 4,
                                        "name": "Diana",
                                        "manager_id": 2
                                    }
                                ],
                                "tableB": "Same as Table A",
                                "result": [
                                    {
                                        "employee": "Bob",
                                        "manager": "Alice"
                                    },
                                    {
                                        "employee": "Charlie",
                                        "manager": "Alice"
                                    },
                                    {
                                        "employee": "Diana",
                                        "manager": "Bob"
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    }
}