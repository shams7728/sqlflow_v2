{
    "id": "sql-injection-prevention",
    "title": "SQL Injection Prevention",
    "category": "Security & Admin",
    "difficulty": "Advanced",
    "estimatedTime": "25 min",
    "starterQuery": "/* This is a conceptual lesson on a critical security topic. */",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is SQL Injection?\nSQL Injection (SQLi) is a code injection technique used to attack data-driven applications. It occurs when malicious SQL statements are inserted into an entry field for execution. A successful SQLi attack can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (like shutdown), and in some cases, issue commands to the operating system."
        },
        {
            "type": "paragraph",
            "text": "2. How does it happen?\nThe vulnerability is most commonly found in application code that constructs SQL queries by concatenating strings with user input. An attacker can supply specially crafted input that changes the structure of the original query."
        },
        {
            "type": "code",
            "text": "-- VULNERABLE CODE (Example in Python-like pseudocode)\n-- userInput = \"' OR '1'='1' --\";\n-- query = \"SELECT * FROM users WHERE username = '\" + userInput + \"';\";\n\n-- The final query becomes:\n-- SELECT * FROM users WHERE username = '' OR '1'='1' --';\n-- The '--' comments out the rest of the line, the `OR '1'='1'` is always true, \n-- potentially logging the attacker in as the first user."
        },
        {
            "type": "paragraph",
            "text": "3. How do you prevent it? The #1 Rule.\nThe absolute best way to prevent SQL injection is to use **Prepared Statements** (also known as Parameterized Queries). This method separates the SQL code from the data. The database is sent the query structure first, and then the parameters (user input) are sent separately. The database treats the parameters strictly as data and never as executable code."
        },
        {
            "type": "code",
            "text": "-- SECURE CODE (Example in Python-like pseudocode using parameters)\n-- userInput = \"admin\";\n-- query = \"SELECT * FROM users WHERE username = ?;\";\n-- database.execute(query, [userInput]);\n\n-- Even if an attacker provides malicious input like \"' OR '1'='1' --\",\n-- the database is only looking for a user whose name is literally that entire string.\n-- The attack fails completely."
        },
        {
            "type": "paragraph",
            "text": "4. What are other defense layers?\nWhile prepared statements are the primary defense, other layers include: \n- **Input Validation:** Rejecting input that contains suspicious characters or doesn't match the expected format (e.g., an email address). \n- **Principle of Least Privilege:** Ensuring the database user account the application uses has the minimum necessary permissions. It should not have administrator rights."
        }
    ],
    "schema": {
        "tables": []
    },
    "sample_data": {},
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic SQL Injection Prevention Query",
            "description": "Practice the fundamental concepts of SQL Injection Prevention.",
            "starterCode": "-- Practice SQL Injection Prevention\n-- Write your query here",
            "solution": "-- Solution will depend on the specific SQL Injection Prevention lesson",
            "hint": "Review the SQL Injection Prevention syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating SQL Injection Prevention functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate SQL Injection Prevention",
            "description": "Apply SQL Injection Prevention with additional complexity.",
            "starterCode": "-- Intermediate SQL Injection Prevention practice\n-- Your code here",
            "solution": "-- More complex SQL Injection Prevention solution",
            "hint": "Combine SQL Injection Prevention with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using SQL Injection Prevention."
        },
        {
            "id": "practice_3",
            "title": "Advanced SQL Injection Prevention",
            "description": "Master advanced SQL Injection Prevention techniques.",
            "starterCode": "-- Advanced SQL Injection Prevention practice\n-- Your advanced query here",
            "solution": "-- Advanced SQL Injection Prevention solution",
            "hint": "Think about edge cases and optimization for SQL Injection Prevention.",
            "expectedOutput": "Advanced SQL Injection Prevention results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world SQL Injection Prevention",
            "description": "Apply SQL Injection Prevention to solve a realistic business problem.",
            "starterCode": "-- Real-world SQL Injection Prevention scenario\n-- Solve the business problem",
            "solution": "-- Business-focused SQL Injection Prevention solution",
            "hint": "Consider how SQL Injection Prevention would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "challenges": [],
    "quiz": [
        {
            "id": "sql-injection-prevention_q1",
            "type": "mcq",
            "question": "What is the primary purpose of SQL Injection Prevention?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement SQL Injection Prevention functionality",
                "To create database backups"
            ],
            "answer": "To implement SQL Injection Prevention functionality",
            "explanation": "SQL Injection Prevention is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "sql-injection-prevention_q2",
            "type": "truefalse",
            "question": "SQL Injection Prevention can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including SQL Injection Prevention can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "sql-injection-prevention_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using SQL Injection Prevention?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using SQL Injection Prevention, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "sql-injection-prevention_q4",
            "type": "truefalse",
            "question": "SQL Injection Prevention is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "sql-injection-prevention_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with SQL Injection Prevention?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "sql-injection-prevention_q6",
            "type": "mcq",
            "question": "When learning SQL Injection Prevention, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "sql-injection-prevention_q7",
            "type": "truefalse",
            "question": "Understanding SQL Injection Prevention is important for database professionals.",
            "answer": true,
            "explanation": "SQL Injection Prevention is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "sql-injection-prevention_q8",
            "type": "mcq",
            "question": "What should you do before using SQL Injection Prevention in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ]
}