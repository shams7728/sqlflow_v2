{
    "id": "inner-join",
    "title": "INNER JOIN",
    "category": "Joins",
    "difficulty": "Intermediate",
    "estimatedTime": "10 min",
    "starterQuery": "SELECT employees.name, departments.name FROM employees INNER JOIN departments ON employees.department_id = departments.id;",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is INNER JOIN?\nAn INNER JOIN returns rows from both tables that satisfy the given join condition. It only includes matching rows based on the specified relationship."
        },
        {
            "type": "paragraph",
            "text": "2. Why use INNER JOIN?\nTo fetch related data from two tables where a match exists. It helps reduce duplication and improve data organization by querying related rows together."
        },
        {
            "type": "paragraph",
            "text": "3. Where is INNER JOIN used?\nIn cases where we need to combine dataâ€”for example, joining customers with orders, employees with departments, or students with their courses."
        },
        {
            "type": "paragraph",
            "text": "4. How is INNER JOIN written?\nUse the `INNER JOIN` clause in a `SELECT` statement and match foreign keys using the `ON` condition."
        },
        {
            "type": "image",
            "src": "/assests/inner-join.jpeg",
            "alt": "INNER JOIN Visual Example"
        },
        {
            "type": "code",
            "text": "SELECT e.name, d.name FROM employees e INNER JOIN departments d ON e.department_id = d.id;"
        },
        {
            "type": "note",
            "text": "Only rows with matching department_id in both employees and departments are returned."
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "employees",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT",
                        "constraints": "NOT NULL"
                    },
                    {
                        "name": "department_id",
                        "type": "INTEGER"
                    }
                ]
            },
            {
                "name": "departments",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT",
                        "constraints": "NOT NULL"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "employees": [
            {
                "id": 1,
                "name": "Alice",
                "department_id": 1
            },
            {
                "id": 2,
                "name": "Bob",
                "department_id": 2
            },
            {
                "id": 3,
                "name": "Charlie",
                "department_id": 3
            },
            {
                "id": 4,
                "name": "Diana",
                "department_id": null
            }
        ],
        "departments": [
            {
                "id": 1,
                "name": "Engineering"
            },
            {
                "id": 2,
                "name": "Marketing"
            },
            {
                "id": 4,
                "name": "Sales"
            }
        ]
    },
    "examples": [
        {
            "query": "SELECT e.name, d.name FROM employees e INNER JOIN departments d ON e.department_id = d.id;",
            "description": "Join employees and departments",
            "explanation": "Returns employee names with their department names if a department match exists."
        }
    ],
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic JOIN",
            "description": "Write a basic JOIN query between two tables.",
            "starterCode": "-- Basic JOIN query\nSELECT \n-- Columns from both tables\nFROM table1\nJOIN table2 ON \n-- Join condition",
            "solution": "SELECT c.name, o.order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
            "hint": "Use table aliases and specify the join condition with ON.",
            "expectedOutput": "Combined data from both tables where the join condition matches."
        },
        {
            "id": "practice_2",
            "title": "JOIN with WHERE",
            "description": "Combine JOIN with WHERE clause for filtering.",
            "starterCode": "-- JOIN with filtering\nSELECT \n-- Your columns\nFROM table1 t1\nJOIN table2 t2 ON \n-- Join condition\nWHERE \n-- Filter condition",
            "solution": "SELECT c.name, o.total FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.total > 100;",
            "hint": "Add WHERE clause after the JOIN to filter the combined results.",
            "expectedOutput": "Joined data that also meets the WHERE condition."
        },
        {
            "id": "practice_3",
            "title": "Multiple JOINs",
            "description": "Join three or more tables together.",
            "starterCode": "-- Multiple JOINs\nSELECT \n-- Columns from multiple tables\nFROM table1 t1\nJOIN table2 t2 ON \n-- First join condition\nJOIN table3 t3 ON \n-- Second join condition",
            "solution": "SELECT c.name, o.order_date, p.product_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id;",
            "hint": "Chain multiple JOIN clauses, each with their own ON condition.",
            "expectedOutput": "Data combined from all joined tables."
        },
        {
            "id": "practice_4",
            "title": "Advanced JOIN Query",
            "description": "Create a comprehensive JOIN query with aliases and filtering.",
            "starterCode": "-- Advanced JOIN query\nSELECT \n-- Aliased columns\nFROM \n-- Multiple tables with aliases and joins\nWHERE \n-- Additional filtering",
            "solution": "SELECT c.name AS customer_name, COUNT(o.order_id) AS order_count FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;",
            "hint": "Combine JOINs with GROUP BY and aggregate functions for advanced analysis.",
            "expectedOutput": "Aggregated data showing relationships between tables."
        }
    ],
    "quiz": [
        {
            "id": "inner-join_q1",
            "type": "mcq",
            "question": "What is the primary purpose of INNER JOIN?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement INNER JOIN functionality",
                "To create database backups"
            ],
            "answer": "To implement INNER JOIN functionality",
            "explanation": "INNER JOIN is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "inner-join_q2",
            "type": "truefalse",
            "question": "INNER JOIN can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including INNER JOIN can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "inner-join_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using INNER JOIN?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using INNER JOIN, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "inner-join_q4",
            "type": "truefalse",
            "question": "INNER JOIN is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "inner-join_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with INNER JOIN?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "inner-join_q6",
            "type": "mcq",
            "question": "When learning INNER JOIN, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "inner-join_q7",
            "type": "truefalse",
            "question": "Understanding INNER JOIN is important for database professionals.",
            "answer": true,
            "explanation": "INNER JOIN is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "inner-join_q8",
            "type": "mcq",
            "question": "What should you do before using INNER JOIN in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "inner-join_ch1",
            "title": "Department Linking",
            "steps": [
                {
                    "stepId": "inner-join_ch1_step1",
                    "description": "Step 1: Show all employee names with matching department names.",
                    "solution": "SELECT e.name, d.name FROM employees e INNER JOIN departments d ON e.department_id = d.id;"
                }
            ]
        }
    ],
    "content": {
        "theory": {
            "concepts": [
                {
                    "id": "inner-join-visual",
                    "title": "Visual Guide to INNER JOIN",
                    "content": "Returns only matching records from both tables",
                    "visualDiagrams": [
                        {
                            "type": "venn-diagram",
                            "joinType": "INNER JOIN",
                            "description": "Returns only matching records from both tables",
                            "leftTable": "Employees",
                            "rightTable": "Departments",
                            "highlightedArea": "intersection",
                            "example": {
                                "tableA": [
                                    {
                                        "id": 1,
                                        "name": "Alice",
                                        "dept_id": 1
                                    },
                                    {
                                        "id": 2,
                                        "name": "Bob",
                                        "dept_id": 2
                                    },
                                    {
                                        "id": 3,
                                        "name": "Charlie",
                                        "dept_id": 3
                                    },
                                    {
                                        "id": 4,
                                        "name": "Diana",
                                        "dept_id": null
                                    }
                                ],
                                "tableB": [
                                    {
                                        "id": 1,
                                        "name": "Engineering"
                                    },
                                    {
                                        "id": 2,
                                        "name": "Marketing"
                                    },
                                    {
                                        "id": 4,
                                        "name": "Sales"
                                    }
                                ],
                                "result": [
                                    {
                                        "id": 1,
                                        "name": "Alice",
                                        "dept_id": 1,
                                        "dept_name": "Engineering"
                                    },
                                    {
                                        "id": 2,
                                        "name": "Bob",
                                        "dept_id": 2,
                                        "dept_name": "Marketing"
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    }
}