{
    "id": "cross-join",
    "title": "CROSS JOIN",
    "category": "Joins",
    "difficulty": "Intermediate",
    "estimatedTime": "15 min",
    "starterQuery": "SELECT s.size, c.color\nFROM sizes s\nCROSS JOIN colors c;",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is a CROSS JOIN?\nA CROSS JOIN returns the Cartesian product of rows from the tables in the join. In other words, it combines each row from the first table with each row from the second table. It does not have an `ON` clause."
        },
        {
            "type": "paragraph",
            "text": "2. Why use a CROSS JOIN?\nIt's used in specific scenarios where you need to generate all possible combinations of items between two sets of data. For example, creating a master list of all possible T-shirt variations by combining every available size with every available color."
        },
        {
            "type": "paragraph",
            "text": "3. How does it work?\nIf the first table has 'N' rows and the second table has 'M' rows, the CROSS JOIN will produce a result set with N * M rows. It simply pairs every row from the first table with every row from the second."
        },
        {
            "type": "paragraph",
            "text": "4. What is the syntax?\nThe explicit syntax is `SELECT ... FROM table1 CROSS JOIN table2;`. An older, implicit syntax is `SELECT ... FROM table1, table2;`, but using the `CROSS JOIN` keyword is clearer and recommended."
        },
        {
            "type": "image",
            "src": "/assests/cross-join.jpg",
            "alt": "CROSS JOIN Illustration"
        },
        {
            "type": "note",
            "text": "Warning: Be very careful with CROSS JOINs on large tables. If you join a table with 1,000 rows to another with 1,000 rows, the result will be 1,000,000 rows, which can crash your database or application."
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "sizes",
                "columns": [
                    {
                        "name": "size",
                        "type": "TEXT",
                        "constraints": "PRIMARY KEY"
                    }
                ]
            },
            {
                "name": "colors",
                "columns": [
                    {
                        "name": "color",
                        "type": "TEXT",
                        "constraints": "PRIMARY KEY"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "sizes": [
            {
                "size": "Small"
            },
            {
                "size": "Medium"
            },
            {
                "size": "Large"
            }
        ],
        "colors": [
            {
                "color": "Red"
            },
            {
                "color": "Blue"
            }
        ]
    },
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic JOIN",
            "description": "Write a basic JOIN query between two tables.",
            "starterCode": "-- Basic JOIN query\nSELECT \n-- Columns from both tables\nFROM table1\nJOIN table2 ON \n-- Join condition",
            "solution": "SELECT c.name, o.order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
            "hint": "Use table aliases and specify the join condition with ON.",
            "expectedOutput": "Combined data from both tables where the join condition matches."
        },
        {
            "id": "practice_2",
            "title": "JOIN with WHERE",
            "description": "Combine JOIN with WHERE clause for filtering.",
            "starterCode": "-- JOIN with filtering\nSELECT \n-- Your columns\nFROM table1 t1\nJOIN table2 t2 ON \n-- Join condition\nWHERE \n-- Filter condition",
            "solution": "SELECT c.name, o.total FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.total > 100;",
            "hint": "Add WHERE clause after the JOIN to filter the combined results.",
            "expectedOutput": "Joined data that also meets the WHERE condition."
        },
        {
            "id": "practice_3",
            "title": "Multiple JOINs",
            "description": "Join three or more tables together.",
            "starterCode": "-- Multiple JOINs\nSELECT \n-- Columns from multiple tables\nFROM table1 t1\nJOIN table2 t2 ON \n-- First join condition\nJOIN table3 t3 ON \n-- Second join condition",
            "solution": "SELECT c.name, o.order_date, p.product_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id;",
            "hint": "Chain multiple JOIN clauses, each with their own ON condition.",
            "expectedOutput": "Data combined from all joined tables."
        },
        {
            "id": "practice_4",
            "title": "Advanced JOIN Query",
            "description": "Create a comprehensive JOIN query with aliases and filtering.",
            "starterCode": "-- Advanced JOIN query\nSELECT \n-- Aliased columns\nFROM \n-- Multiple tables with aliases and joins\nWHERE \n-- Additional filtering",
            "solution": "SELECT c.name AS customer_name, COUNT(o.order_id) AS order_count FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;",
            "hint": "Combine JOINs with GROUP BY and aggregate functions for advanced analysis.",
            "expectedOutput": "Aggregated data showing relationships between tables."
        }
    ],
    "quiz": [
        {
            "id": "cross-join_q1",
            "type": "mcq",
            "question": "What is the primary purpose of CROSS JOIN?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement CROSS JOIN functionality",
                "To create database backups"
            ],
            "answer": "To implement CROSS JOIN functionality",
            "explanation": "CROSS JOIN is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "cross-join_q2",
            "type": "truefalse",
            "question": "CROSS JOIN can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including CROSS JOIN can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "cross-join_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using CROSS JOIN?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using CROSS JOIN, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "cross-join_q4",
            "type": "truefalse",
            "question": "CROSS JOIN is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "cross-join_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with CROSS JOIN?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "cross-join_q6",
            "type": "mcq",
            "question": "When learning CROSS JOIN, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "cross-join_q7",
            "type": "truefalse",
            "question": "Understanding CROSS JOIN is important for database professionals.",
            "answer": true,
            "explanation": "CROSS JOIN is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "cross-join_q8",
            "type": "mcq",
            "question": "What should you do before using CROSS JOIN in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "crossjoin_ch1",
            "title": "Generate a Deck of Cards",
            "steps": [
                {
                    "stepId": "crossjoin_ch1_step1",
                    "description": "Imagine you have a `suits` table ('Hearts', 'Diamonds') and a `ranks` table ('King', 'Queen'). Write a query to generate all combinations of ranks and suits.",
                    "solution": "SELECT r.rank, s.suit FROM ranks r CROSS JOIN suits s;"
                }
            ]
        },
        {
            "id": "crossjoin_ch2",
            "title": "Create a Price Matrix",
            "steps": [
                {
                    "stepId": "crossjoin_ch2_step1",
                    "description": "Imagine a `products` table and a `regions` table. Write a query to create every possible combination of product and region, which could be used as a starting point for a pricing matrix.",
                    "solution": "SELECT p.product_name, r.region_name FROM products p CROSS JOIN regions r;"
                }
            ]
        }
    ],
    "content": {
        "theory": {
            "concepts": [
                {
                    "id": "cross-join-visual",
                    "title": "Visual Guide to CROSS JOIN",
                    "content": "Returns Cartesian product - every row from first table paired with every row from second table",
                    "visualDiagrams": [
                        {
                            "type": "grid-diagram",
                            "joinType": "CROSS JOIN",
                            "description": "Returns Cartesian product - every row from first table paired with every row from second table",
                            "leftTable": "Sizes",
                            "rightTable": "Colors",
                            "highlightedArea": "all",
                            "example": {
                                "tableA": [
                                    {
                                        "size": "Small"
                                    },
                                    {
                                        "size": "Medium"
                                    },
                                    {
                                        "size": "Large"
                                    }
                                ],
                                "tableB": [
                                    {
                                        "color": "Red"
                                    },
                                    {
                                        "color": "Blue"
                                    }
                                ],
                                "result": [
                                    {
                                        "size": "Small",
                                        "color": "Red"
                                    },
                                    {
                                        "size": "Small",
                                        "color": "Blue"
                                    },
                                    {
                                        "size": "Medium",
                                        "color": "Red"
                                    },
                                    {
                                        "size": "Medium",
                                        "color": "Blue"
                                    },
                                    {
                                        "size": "Large",
                                        "color": "Red"
                                    },
                                    {
                                        "size": "Large",
                                        "color": "Blue"
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    }
}