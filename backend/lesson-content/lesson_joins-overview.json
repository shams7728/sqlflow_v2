{
    "id": "joins-overview",
    "title": "Joins Overview",
    "category": "Joins",
    "difficulty": "Intermediate",
    "estimatedTime": "12 min",
    "starterQuery": "SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.id;",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What are Joins in SQL?\nJoins are used to combine rows from two or more tables based on related columns. They help fetch meaningful, connected data from multiple tables."
        },
        {
            "type": "paragraph",
            "text": "2. Why Use Joins?\nJoins allow you to organize and retrieve related data spread across tables. For example, linking employee data with their department info for comprehensive reports."
        },
        {
            "type": "paragraph",
            "text": "3. Where are Joins Used?\nIn complex queries involving relational databases with normalized schemas, where data is logically split across different tables."
        },
        {
            "type": "paragraph",
            "text": "4. How are Joins Written?\nUse JOIN clauses (INNER, LEFT, RIGHT, FULL, etc.) in a SELECT statement and define the ON condition to match keys."
        },
        {
            "type": "table",
            "columns": [
                "Join Type",
                "Description"
            ],
            "rows": [
                [
                    "INNER JOIN",
                    "Returns only matching rows from both tables"
                ],
                [
                    "LEFT JOIN",
                    "Returns all rows from the left table, plus matches from the right"
                ],
                [
                    "RIGHT JOIN",
                    "Returns all rows from the right table, plus matches from the left"
                ],
                [
                    "FULL JOIN",
                    "Returns all rows when there is a match in either table"
                ],
                [
                    "SELF JOIN",
                    "Joins a table to itself using aliases"
                ],
                [
                    "CROSS JOIN",
                    "Returns the Cartesian product of both tables"
                ]
            ]
        },
        {
            "type": "images",
            "images": [
                {
                    "src": "/assests/img_inner_join.png",
                    "alt": "Inner Join",
                    "caption": "Inner Join Diagram"
                },
                {
                    "src": "/assests/img_left_join.png",
                    "alt": "Left Join",
                    "caption": "Left Join Diagram"
                }
            ]
        },
        {
            "type": "images",
            "images": [
                {
                    "src": "/assests/img_right_join.png",
                    "alt": "Right Join",
                    "caption": "Right Join Diagram"
                },
                {
                    "src": "/assests/img_full_outer_join.png",
                    "alt": "Full Outer Join",
                    "caption": "Full Outer Join Diagram"
                }
            ]
        },
        {
            "type": "note",
            "text": "SQLite does not support FULL OUTER or RIGHT JOIN directly, but they can be emulated using UNION and subqueries."
        },
        {
            "type": "code",
            "text": "SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.id;"
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "employees",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT",
                        "constraints": "NOT NULL"
                    },
                    {
                        "name": "department_id",
                        "type": "INTEGER"
                    }
                ]
            },
            {
                "name": "departments",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT",
                        "constraints": "NOT NULL"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "employees": [
            {
                "id": 1,
                "name": "Alice",
                "department_id": 1
            },
            {
                "id": 2,
                "name": "Bob",
                "department_id": 2
            },
            {
                "id": 3,
                "name": "Charlie",
                "department_id": 3
            },
            {
                "id": 4,
                "name": "Diana",
                "department_id": null
            }
        ],
        "departments": [
            {
                "id": 1,
                "name": "Engineering"
            },
            {
                "id": 2,
                "name": "Marketing"
            },
            {
                "id": 4,
                "name": "Sales"
            }
        ]
    },
    "examples": [
        {
            "query": "SELECT e.name, d.name FROM employees e INNER JOIN departments d ON e.department_id = d.id;",
            "description": "INNER JOIN example",
            "explanation": "Returns names of employees and their departments where a match exists."
        },
        {
            "query": "SELECT e.name, d.name FROM employees e LEFT JOIN departments d ON e.department_id = d.id;",
            "description": "LEFT JOIN example",
            "explanation": "Returns all employees and their departments, including those without matches."
        }
    ],
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic JOIN",
            "description": "Write a basic JOIN query between two tables.",
            "starterCode": "-- Basic JOIN query\nSELECT \n-- Columns from both tables\nFROM table1\nJOIN table2 ON \n-- Join condition",
            "solution": "SELECT c.name, o.order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
            "hint": "Use table aliases and specify the join condition with ON.",
            "expectedOutput": "Combined data from both tables where the join condition matches."
        },
        {
            "id": "practice_2",
            "title": "JOIN with WHERE",
            "description": "Combine JOIN with WHERE clause for filtering.",
            "starterCode": "-- JOIN with filtering\nSELECT \n-- Your columns\nFROM table1 t1\nJOIN table2 t2 ON \n-- Join condition\nWHERE \n-- Filter condition",
            "solution": "SELECT c.name, o.total FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.total > 100;",
            "hint": "Add WHERE clause after the JOIN to filter the combined results.",
            "expectedOutput": "Joined data that also meets the WHERE condition."
        },
        {
            "id": "practice_3",
            "title": "Multiple JOINs",
            "description": "Join three or more tables together.",
            "starterCode": "-- Multiple JOINs\nSELECT \n-- Columns from multiple tables\nFROM table1 t1\nJOIN table2 t2 ON \n-- First join condition\nJOIN table3 t3 ON \n-- Second join condition",
            "solution": "SELECT c.name, o.order_date, p.product_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id;",
            "hint": "Chain multiple JOIN clauses, each with their own ON condition.",
            "expectedOutput": "Data combined from all joined tables."
        },
        {
            "id": "practice_4",
            "title": "Advanced JOIN Query",
            "description": "Create a comprehensive JOIN query with aliases and filtering.",
            "starterCode": "-- Advanced JOIN query\nSELECT \n-- Aliased columns\nFROM \n-- Multiple tables with aliases and joins\nWHERE \n-- Additional filtering",
            "solution": "SELECT c.name AS customer_name, COUNT(o.order_id) AS order_count FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;",
            "hint": "Combine JOINs with GROUP BY and aggregate functions for advanced analysis.",
            "expectedOutput": "Aggregated data showing relationships between tables."
        }
    ],
    "quiz": [
        {
            "id": "joins-overview_q1",
            "type": "mcq",
            "question": "What is the primary purpose of Joins Overview?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement Joins Overview functionality",
                "To create database backups"
            ],
            "answer": "To implement Joins Overview functionality",
            "explanation": "Joins Overview is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "joins-overview_q2",
            "type": "truefalse",
            "question": "Joins Overview can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including Joins Overview can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "joins-overview_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using Joins Overview?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using Joins Overview, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "joins-overview_q4",
            "type": "truefalse",
            "question": "Joins Overview is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "joins-overview_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with Joins Overview?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "joins-overview_q6",
            "type": "mcq",
            "question": "When learning Joins Overview, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "joins-overview_q7",
            "type": "truefalse",
            "question": "Understanding Joins Overview is important for database professionals.",
            "answer": true,
            "explanation": "Joins Overview is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "joins-overview_q8",
            "type": "mcq",
            "question": "What should you do before using Joins Overview in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "joins-overview_ch1",
            "title": "Explore Join Types",
            "steps": [
                {
                    "stepId": "joins-overview_ch1_step1",
                    "description": "Step 1: Perform an INNER JOIN between employees and departments.",
                    "solution": "SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.id;"
                },
                {
                    "stepId": "joins-overview_ch1_step2",
                    "description": "Step 2: Perform a LEFT JOIN to include employees with no department.",
                    "solution": "SELECT * FROM employees LEFT JOIN departments ON employees.department_id = departments.id;"
                }
            ]
        }
    ]
}