{
    "id": "triggers",
    "title": "Triggers",
    "category": "Advanced Querying",
    "difficulty": "Advanced",
    "estimatedTime": "25 min",
    "starterQuery": "/* This lesson is conceptual as Triggers have complex syntax that varies by database. */\n-- The examples below use PostgreSQL syntax.",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is a Trigger?\nA trigger is a special type of stored procedure that automatically executes in response to a specific event on a table. These events are typically `INSERT`, `UPDATE`, or `DELETE` operations."
        },
        {
            "type": "paragraph",
            "text": "2. Why use a Trigger?\nTriggers are used to maintain data integrity and enforce complex business rules that cannot be handled by simple constraints. A common use case is creating an audit trail: whenever a row is updated in a critical table, a trigger can automatically insert a copy of the old data into a separate log table."
        },
        {
            "type": "paragraph",
            "text": "3. How do they work?\nYou define a trigger on a specific table and specify the event (e.g., `BEFORE UPDATE`, `AFTER INSERT`) that will 'fire' it. When that event occurs, the code inside the trigger's function runs automatically as part of the same transaction."
        },
        {
            "type": "paragraph",
            "text": "4. What is the syntax? (PostgreSQL Example)\nCreating a trigger is usually a two-step process. First, you create a special function that contains the logic. Second, you create the trigger itself and bind it to a table and event, telling it to execute that function."
        },
        {
            "type": "code",
            "text": "-- Step 1: Create a function that will be executed by the trigger.\nCREATE OR REPLACE FUNCTION log_salary_changes()\nRETURNS TRIGGER AS $$\nBEGIN\n    -- 'OLD' refers to the row before the update\n    -- 'NEW' refers to the row after the update\n    IF NEW.salary <> OLD.salary THEN\n        INSERT INTO salary_audit(employee_id, old_salary, new_salary, change_date)\n        VALUES(OLD.id, OLD.salary, NEW.salary, now());\n    END IF;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Step 2: Create the trigger and attach it to the employees table.\nCREATE TRIGGER salary_change_trigger\nBEFORE UPDATE ON employees\nFOR EACH ROW\nEXECUTE FUNCTION log_salary_changes();"
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "employees",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT"
                    },
                    {
                        "name": "salary",
                        "type": "INTEGER"
                    }
                ]
            },
            {
                "name": "salary_audit",
                "columns": [
                    {
                        "name": "audit_id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "employee_id",
                        "type": "INTEGER"
                    },
                    {
                        "name": "old_salary",
                        "type": "INTEGER"
                    },
                    {
                        "name": "new_salary",
                        "type": "INTEGER"
                    },
                    {
                        "name": "change_date",
                        "type": "TIMESTAMP"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "employees": [
            {
                "id": 1,
                "name": "Alice",
                "salary": 80000
            },
            {
                "id": 2,
                "name": "Bob",
                "salary": 95000
            }
        ],
        "salary_audit": []
    },
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic Triggers Query",
            "description": "Practice the fundamental concepts of Triggers.",
            "starterCode": "-- Practice Triggers\n-- Write your query here",
            "solution": "-- Solution will depend on the specific Triggers lesson",
            "hint": "Review the Triggers syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating Triggers functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate Triggers",
            "description": "Apply Triggers with additional complexity.",
            "starterCode": "-- Intermediate Triggers practice\n-- Your code here",
            "solution": "-- More complex Triggers solution",
            "hint": "Combine Triggers with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using Triggers."
        },
        {
            "id": "practice_3",
            "title": "Advanced Triggers",
            "description": "Master advanced Triggers techniques.",
            "starterCode": "-- Advanced Triggers practice\n-- Your advanced query here",
            "solution": "-- Advanced Triggers solution",
            "hint": "Think about edge cases and optimization for Triggers.",
            "expectedOutput": "Advanced Triggers results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world Triggers",
            "description": "Apply Triggers to solve a realistic business problem.",
            "starterCode": "-- Real-world Triggers scenario\n-- Solve the business problem",
            "solution": "-- Business-focused Triggers solution",
            "hint": "Consider how Triggers would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "quiz": [
        {
            "id": "triggers_q1",
            "type": "mcq",
            "question": "What is the primary purpose of Triggers?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement Triggers functionality",
                "To create database backups"
            ],
            "answer": "To implement Triggers functionality",
            "explanation": "Triggers is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "triggers_q2",
            "type": "truefalse",
            "question": "Triggers can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including Triggers can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "triggers_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using Triggers?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using Triggers, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "triggers_q4",
            "type": "truefalse",
            "question": "Triggers is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "triggers_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with Triggers?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "triggers_q6",
            "type": "mcq",
            "question": "When learning Triggers, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "triggers_q7",
            "type": "truefalse",
            "question": "Understanding Triggers is important for database professionals.",
            "answer": true,
            "explanation": "Triggers is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "triggers_q8",
            "type": "mcq",
            "question": "What should you do before using Triggers in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "triggers_ch1",
            "title": "Design an Audit Trigger",
            "steps": [
                {
                    "stepId": "triggers_ch1_step1",
                    "description": "You want to log every new user added to a `users` table. What event and timing would your trigger use? (e.g., `BEFORE INSERT`, `AFTER DELETE`, etc.)",
                    "solution": "AFTER INSERT"
                },
                {
                    "stepId": "triggers_ch1_step2",
                    "description": "Inside the trigger function, what action would you perform to log the new user's information into a `user_audit_log` table?",
                    "solution": "You would write an `INSERT` statement that takes the new user's details (from the `NEW` special variable) and inserts them into the `user_audit_log` table."
                }
            ]
        }
    ]
}