{
    "id": "right-join",
    "title": "RIGHT JOIN",
    "category": "Joins",
    "difficulty": "Intermediate",
    "estimatedTime": "15 min",
    "starterQuery": "SELECT e.name, d.name FROM employees e RIGHT JOIN departments d ON e.department_id = d.id;",
    "theory": [
        {
            "type": "qa_list",
            "items": [
                {
                    "question": "What is a RIGHT JOIN?",
                    "answer": "A RIGHT JOIN (or RIGHT OUTER JOIN) returns all records from the right table (departments) and the matched records from the left table (employees). If there is no match, the result is NULL for columns from the left table."
                },
                {
                    "question": "Why use RIGHT JOIN?",
                    "answer": "Use it when your main focus is on the right table. For example, to get a complete list of all departments and see which employees are in them, ensuring even empty departments appear in your results."
                },
                {
                    "question": "Where is RIGHT JOIN used?",
                    "answer": "It's common for finding all items in a 'lookup' table and seeing what, if anything, from a primary table corresponds to them, such as finding all departments that have no employees."
                },
                {
                    "question": "How is RIGHT JOIN written?",
                    "answer": "Use the `RIGHT JOIN` keyword to connect two tables, followed by an `ON` clause to specify the linking columns. Using table aliases (like `e` for employees) makes the query more readable."
                }
            ]
        },
        {
            "type": "image",
            "src": "/assests/right-join.jpeg",
            "alt": "RIGHT JOIN Illustration showing all of the right circle and the intersection"
        },
        {
            "type": "code",
            "text": "/* Using aliases for clarity */\nSELECT e.name, d.name\nFROM employees e\nRIGHT JOIN departments d ON e.department_id = d.id;"
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "employees",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT",
                        "constraints": "NOT NULL"
                    },
                    {
                        "name": "department_id",
                        "type": "INTEGER"
                    }
                ]
            },
            {
                "name": "departments",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT",
                        "constraints": "NOT NULL"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "employees": [
            {
                "id": 1,
                "name": "Alice",
                "department_id": 1
            },
            {
                "id": 2,
                "name": "Bob",
                "department_id": 2
            },
            {
                "id": 3,
                "name": "Charlie",
                "department_id": 3
            },
            {
                "id": 4,
                "name": "Diana",
                "department_id": null
            }
        ],
        "departments": [
            {
                "id": 1,
                "name": "Engineering"
            },
            {
                "id": 2,
                "name": "Marketing"
            },
            {
                "id": 4,
                "name": "Sales"
            }
        ]
    },
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic JOIN",
            "description": "Write a basic JOIN query between two tables.",
            "starterCode": "-- Basic JOIN query\nSELECT \n-- Columns from both tables\nFROM table1\nJOIN table2 ON \n-- Join condition",
            "solution": "SELECT c.name, o.order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
            "hint": "Use table aliases and specify the join condition with ON.",
            "expectedOutput": "Combined data from both tables where the join condition matches."
        },
        {
            "id": "practice_2",
            "title": "JOIN with WHERE",
            "description": "Combine JOIN with WHERE clause for filtering.",
            "starterCode": "-- JOIN with filtering\nSELECT \n-- Your columns\nFROM table1 t1\nJOIN table2 t2 ON \n-- Join condition\nWHERE \n-- Filter condition",
            "solution": "SELECT c.name, o.total FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.total > 100;",
            "hint": "Add WHERE clause after the JOIN to filter the combined results.",
            "expectedOutput": "Joined data that also meets the WHERE condition."
        },
        {
            "id": "practice_3",
            "title": "Multiple JOINs",
            "description": "Join three or more tables together.",
            "starterCode": "-- Multiple JOINs\nSELECT \n-- Columns from multiple tables\nFROM table1 t1\nJOIN table2 t2 ON \n-- First join condition\nJOIN table3 t3 ON \n-- Second join condition",
            "solution": "SELECT c.name, o.order_date, p.product_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id;",
            "hint": "Chain multiple JOIN clauses, each with their own ON condition.",
            "expectedOutput": "Data combined from all joined tables."
        },
        {
            "id": "practice_4",
            "title": "Advanced JOIN Query",
            "description": "Create a comprehensive JOIN query with aliases and filtering.",
            "starterCode": "-- Advanced JOIN query\nSELECT \n-- Aliased columns\nFROM \n-- Multiple tables with aliases and joins\nWHERE \n-- Additional filtering",
            "solution": "SELECT c.name AS customer_name, COUNT(o.order_id) AS order_count FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;",
            "hint": "Combine JOINs with GROUP BY and aggregate functions for advanced analysis.",
            "expectedOutput": "Aggregated data showing relationships between tables."
        }
    ],
    "quiz": [
        {
            "id": "right-join_q1",
            "type": "mcq",
            "question": "What is the primary purpose of RIGHT JOIN?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement RIGHT JOIN functionality",
                "To create database backups"
            ],
            "answer": "To implement RIGHT JOIN functionality",
            "explanation": "RIGHT JOIN is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "right-join_q2",
            "type": "truefalse",
            "question": "RIGHT JOIN can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including RIGHT JOIN can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "right-join_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using RIGHT JOIN?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using RIGHT JOIN, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "right-join_q4",
            "type": "truefalse",
            "question": "RIGHT JOIN is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "right-join_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with RIGHT JOIN?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "right-join_q6",
            "type": "mcq",
            "question": "When learning RIGHT JOIN, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "right-join_q7",
            "type": "truefalse",
            "question": "Understanding RIGHT JOIN is important for database professionals.",
            "answer": true,
            "explanation": "RIGHT JOIN is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "right-join_q8",
            "type": "mcq",
            "question": "What should you do before using RIGHT JOIN in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "right-join_ch2",
            "title": "Find Unstaffed Departments",
            "steps": [
                {
                    "stepId": "right-join_ch2_step1",
                    "description": "Step 1: Join employees and departments, ensuring all departments are listed.",
                    "solution": "SELECT e.name, d.name FROM employees e RIGHT JOIN departments d ON e.department_id = d.id;"
                },
                {
                    "stepId": "right-join_ch2_step2",
                    "description": "Step 2: From that result, filter to find only the departments where the employee name is NULL.",
                    "solution": "SELECT d.name FROM employees e RIGHT JOIN departments d ON e.department_id = d.id WHERE e.name IS NULL;"
                }
            ]
        }
    ],
    "content": {
        "theory": {
            "concepts": [
                {
                    "id": "right-join-visual",
                    "title": "Visual Guide to RIGHT JOIN",
                    "content": "Returns all records from right table and matching records from left table",
                    "visualDiagrams": [
                        {
                            "type": "venn-diagram",
                            "joinType": "RIGHT JOIN",
                            "description": "Returns all records from right table and matching records from left table",
                            "leftTable": "Employees",
                            "rightTable": "Departments",
                            "highlightedArea": "right-and-intersection",
                            "example": {
                                "tableA": [
                                    {
                                        "id": 1,
                                        "name": "Alice",
                                        "dept_id": 1
                                    },
                                    {
                                        "id": 2,
                                        "name": "Bob",
                                        "dept_id": 2
                                    }
                                ],
                                "tableB": [
                                    {
                                        "id": 1,
                                        "name": "Engineering"
                                    },
                                    {
                                        "id": 2,
                                        "name": "Marketing"
                                    },
                                    {
                                        "id": 3,
                                        "name": "HR"
                                    },
                                    {
                                        "id": 4,
                                        "name": "Sales"
                                    }
                                ],
                                "result": [
                                    {
                                        "id": 1,
                                        "name": "Alice",
                                        "dept_id": 1,
                                        "dept_name": "Engineering"
                                    },
                                    {
                                        "id": 2,
                                        "name": "Bob",
                                        "dept_id": 2,
                                        "dept_name": "Marketing"
                                    },
                                    {
                                        "id": null,
                                        "name": null,
                                        "dept_id": 3,
                                        "dept_name": "HR"
                                    },
                                    {
                                        "id": null,
                                        "name": null,
                                        "dept_id": 4,
                                        "dept_name": "Sales"
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    }
}