{
    "id": "foreign-key",
    "title": "FOREIGN KEY Constraint",
    "category": "Data Definition",
    "difficulty": "Intermediate",
    "estimatedTime": "20 min",
    "starterQuery": "/* Let's create an 'orders' table that links to our 'customers' table. */\n\nCREATE TABLE orders (\n    order_id INTEGER PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INTEGER,\n    FOREIGN KEY (customer_id) REFERENCES customers (customer_id)\n);",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is a FOREIGN KEY?\nA `FOREIGN KEY` is a key used to link two tables together. It is a field (or collection of fields) in one table that refers to the `PRIMARY KEY` in another table. The table containing the foreign key is called the child table, and the table containing the primary key is called the parent table."
        },
        {
            "type": "paragraph",
            "text": "2. Why is it important?\nForeign keys are the foundation of relational database design. They enforce 'referential integrity', which means that a row in a child table cannot have a foreign key value that does not exist in the parent table's primary key. This prevents 'orphan' records (like an order without a customer)."
        },
        {
            "type": "paragraph",
            "text": "3. How is it defined?\nYou define a foreign key using the `FOREIGN KEY` constraint. The syntax is `FOREIGN KEY (column_in_child_table) REFERENCES parent_table (column_in_parent_table);`. This is typically defined at the end of the `CREATE TABLE` statement."
        },
        {
            "type": "note",
            "text": "By creating this link, the database ensures that you can't add an order for a customer who doesn't exist, maintaining the consistency and logic of your data."
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "customers",
                "columns": [
                    {
                        "name": "customer_id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "customer_name",
                        "type": "TEXT"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "customers": [
            {
                "customer_id": 1,
                "customer_name": "John Smith"
            },
            {
                "customer_id": 2,
                "customer_name": "Jane Doe"
            }
        ]
    },
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic FOREIGN KEY Constraint Query",
            "description": "Practice the fundamental concepts of FOREIGN KEY Constraint.",
            "starterCode": "-- Practice FOREIGN KEY Constraint\n-- Write your query here",
            "solution": "-- Solution will depend on the specific FOREIGN KEY Constraint lesson",
            "hint": "Review the FOREIGN KEY Constraint syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating FOREIGN KEY Constraint functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate FOREIGN KEY Constraint",
            "description": "Apply FOREIGN KEY Constraint with additional complexity.",
            "starterCode": "-- Intermediate FOREIGN KEY Constraint practice\n-- Your code here",
            "solution": "-- More complex FOREIGN KEY Constraint solution",
            "hint": "Combine FOREIGN KEY Constraint with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using FOREIGN KEY Constraint."
        },
        {
            "id": "practice_3",
            "title": "Advanced FOREIGN KEY Constraint",
            "description": "Master advanced FOREIGN KEY Constraint techniques.",
            "starterCode": "-- Advanced FOREIGN KEY Constraint practice\n-- Your advanced query here",
            "solution": "-- Advanced FOREIGN KEY Constraint solution",
            "hint": "Think about edge cases and optimization for FOREIGN KEY Constraint.",
            "expectedOutput": "Advanced FOREIGN KEY Constraint results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world FOREIGN KEY Constraint",
            "description": "Apply FOREIGN KEY Constraint to solve a realistic business problem.",
            "starterCode": "-- Real-world FOREIGN KEY Constraint scenario\n-- Solve the business problem",
            "solution": "-- Business-focused FOREIGN KEY Constraint solution",
            "hint": "Consider how FOREIGN KEY Constraint would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "quiz": [
        {
            "id": "foreign-key_q1",
            "type": "mcq",
            "question": "What is the primary purpose of FOREIGN KEY Constraint?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement FOREIGN KEY Constraint functionality",
                "To create database backups"
            ],
            "answer": "To implement FOREIGN KEY Constraint functionality",
            "explanation": "FOREIGN KEY Constraint is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "foreign-key_q2",
            "type": "truefalse",
            "question": "FOREIGN KEY Constraint can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including FOREIGN KEY Constraint can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "foreign-key_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using FOREIGN KEY Constraint?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using FOREIGN KEY Constraint, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "foreign-key_q4",
            "type": "truefalse",
            "question": "FOREIGN KEY Constraint is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "foreign-key_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with FOREIGN KEY Constraint?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "foreign-key_q6",
            "type": "mcq",
            "question": "When learning FOREIGN KEY Constraint, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "foreign-key_q7",
            "type": "truefalse",
            "question": "Understanding FOREIGN KEY Constraint is important for database professionals.",
            "answer": true,
            "explanation": "FOREIGN KEY Constraint is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "foreign-key_q8",
            "type": "mcq",
            "question": "What should you do before using FOREIGN KEY Constraint in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "fk_ch1",
            "title": "Link Books to Authors",
            "steps": [
                {
                    "stepId": "fk_ch1_step1",
                    "description": "Imagine an `authors` table with an `author_id` PRIMARY KEY. Create a `books` table with a `book_id` (PRIMARY KEY), a `title` (TEXT), and an `author_id` column that correctly links to the `authors` table.",
                    "solution": "CREATE TABLE books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, FOREIGN KEY (author_id) REFERENCES authors (author_id));"
                }
            ]
        },
        {
            "id": "fk_ch2",
            "title": "Link Employees to Departments",
            "steps": [
                {
                    "stepId": "fk_ch2_step1",
                    "description": "Assume a `departments` table exists with a `dept_code` (TEXT) PRIMARY KEY. Create an `employees` table with an `emp_id` (PRIMARY KEY), `name` (TEXT), and a `department_code` (TEXT) column that enforces referential integrity with the `departments` table.",
                    "solution": "CREATE TABLE employees (emp_id INTEGER PRIMARY KEY, name TEXT, department_code TEXT, FOREIGN KEY (department_code) REFERENCES departments (dept_code));"
                }
            ]
        }
    ]
}