{
    "id": "common-table-expressions",
    "title": "Common Table Expressions (CTEs)",
    "category": "Advanced Querying",
    "difficulty": "Advanced",
    "estimatedTime": "25 min",
    "starterQuery": "/* Let's use a CTE to find all employees in the 'Sales' department. */\n\nWITH SalesDept AS (\n    SELECT id FROM departments WHERE name = 'Sales'\n)\nSELECT e.name\nFROM employees e\nJOIN SalesDept sd ON e.department_id = sd.id;",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is a Common Table Expression (CTE)?\nA CTE is a temporary, named result set that you can reference within a `SELECT`, `INSERT`, `UPDATE`, or `DELETE` statement. It helps break down complex queries into simpler, more readable logical blocks."
        },
        {
            "type": "paragraph",
            "text": "2. Why use a CTE?\nCTEs make long and complex queries much easier to read and maintain. They also enable recursive queries, which are essential for querying hierarchical data (like an organizational chart or a bill of materials)."
        },
        {
            "type": "paragraph",
            "text": "3. What is the syntax?\nA CTE is defined using the `WITH` keyword. The syntax is `WITH cte_name AS (SELECT ...)` followed by the main query that references the CTE. You can define multiple CTEs in a single `WITH` clause, separated by commas."
        },
        {
            "type": "paragraph",
            "text": "4. What is a Recursive CTE?\nA recursive CTE is one that references itself. It must have two parts: an 'anchor member' (the initial `SELECT` statement) and a 'recursive member' (which references the CTE itself), combined with a `UNION ALL`."
        },
        {
            "type": "code",
            "text": "-- A simple CTE to get all managers\nWITH Managers AS (\n    SELECT * FROM employees WHERE role = 'Manager'\n)\nSELECT name FROM Managers;"
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "employees",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT"
                    },
                    {
                        "name": "role",
                        "type": "TEXT"
                    },
                    {
                        "name": "manager_id",
                        "type": "INTEGER"
                    }
                ]
            },
            {
                "name": "departments",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "name",
                        "type": "TEXT"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "employees": [
            {
                "id": 1,
                "name": "Alice",
                "role": "CEO",
                "manager_id": null
            },
            {
                "id": 2,
                "name": "Bob",
                "role": "Manager",
                "manager_id": 1
            },
            {
                "id": 3,
                "name": "Charlie",
                "role": "Manager",
                "manager_id": 1
            },
            {
                "id": 4,
                "name": "Diana",
                "role": "Engineer",
                "manager_id": 2
            },
            {
                "id": 5,
                "name": "Eve",
                "role": "Engineer",
                "manager_id": 2
            },
            {
                "id": 6,
                "name": "Frank",
                "role": "Sales",
                "manager_id": 3
            }
        ],
        "departments": [
            {
                "id": 1,
                "name": "Executive"
            },
            {
                "id": 2,
                "name": "Engineering"
            },
            {
                "id": 3,
                "name": "Sales"
            }
        ]
    },
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic Common Table Expressions (CTEs) Query",
            "description": "Practice the fundamental concepts of Common Table Expressions (CTEs).",
            "starterCode": "-- Practice Common Table Expressions (CTEs)\n-- Write your query here",
            "solution": "-- Solution will depend on the specific Common Table Expressions (CTEs) lesson",
            "hint": "Review the Common Table Expressions (CTEs) syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating Common Table Expressions (CTEs) functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate Common Table Expressions (CTEs)",
            "description": "Apply Common Table Expressions (CTEs) with additional complexity.",
            "starterCode": "-- Intermediate Common Table Expressions (CTEs) practice\n-- Your code here",
            "solution": "-- More complex Common Table Expressions (CTEs) solution",
            "hint": "Combine Common Table Expressions (CTEs) with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using Common Table Expressions (CTEs)."
        },
        {
            "id": "practice_3",
            "title": "Advanced Common Table Expressions (CTEs)",
            "description": "Master advanced Common Table Expressions (CTEs) techniques.",
            "starterCode": "-- Advanced Common Table Expressions (CTEs) practice\n-- Your advanced query here",
            "solution": "-- Advanced Common Table Expressions (CTEs) solution",
            "hint": "Think about edge cases and optimization for Common Table Expressions (CTEs).",
            "expectedOutput": "Advanced Common Table Expressions (CTEs) results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world Common Table Expressions (CTEs)",
            "description": "Apply Common Table Expressions (CTEs) to solve a realistic business problem.",
            "starterCode": "-- Real-world Common Table Expressions (CTEs) scenario\n-- Solve the business problem",
            "solution": "-- Business-focused Common Table Expressions (CTEs) solution",
            "hint": "Consider how Common Table Expressions (CTEs) would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "quiz": [
        {
            "id": "common-table-expressions_q1",
            "type": "mcq",
            "question": "What is the primary purpose of Common Table Expressions (CTEs)?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement Common Table Expressions (CTEs) functionality",
                "To create database backups"
            ],
            "answer": "To implement Common Table Expressions (CTEs) functionality",
            "explanation": "Common Table Expressions (CTEs) is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "common-table-expressions_q2",
            "type": "truefalse",
            "question": "Common Table Expressions (CTEs) can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including Common Table Expressions (CTEs) can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "common-table-expressions_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using Common Table Expressions (CTEs)?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using Common Table Expressions (CTEs), you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "common-table-expressions_q4",
            "type": "truefalse",
            "question": "Common Table Expressions (CTEs) is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "common-table-expressions_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with Common Table Expressions (CTEs)?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "common-table-expressions_q6",
            "type": "mcq",
            "question": "When learning Common Table Expressions (CTEs), what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "common-table-expressions_q7",
            "type": "truefalse",
            "question": "Understanding Common Table Expressions (CTEs) is important for database professionals.",
            "answer": true,
            "explanation": "Common Table Expressions (CTEs) is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "common-table-expressions_q8",
            "type": "mcq",
            "question": "What should you do before using Common Table Expressions (CTEs) in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "cte_ch1",
            "title": "Find All Subordinates of a Manager",
            "steps": [
                {
                    "stepId": "cte_ch1_step1",
                    "description": "This is a classic use for a recursive CTE. Start by creating the anchor member: a CTE named `Subordinates` that selects the employee with `id` = 1 (Alice).",
                    "solution": "WITH RECURSIVE Subordinates AS (SELECT id, name, manager_id FROM employees WHERE id = 1)"
                },
                {
                    "stepId": "cte_ch1_step2",
                    "description": "Now, add the recursive part. `UNION ALL` with a `SELECT` that joins `employees` to your `Subordinates` CTE to find employees whose `manager_id` is in the CTE.",
                    "solution": "WITH RECURSIVE Subordinates AS (SELECT id, name, manager_id FROM employees WHERE id = 1 UNION ALL SELECT e.id, e.name, e.manager_id FROM employees e JOIN Subordinates s ON e.manager_id = s.id) SELECT name FROM Subordinates;"
                }
            ]
        }
    ]
}