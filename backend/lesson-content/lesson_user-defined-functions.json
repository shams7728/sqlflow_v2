{
    "id": "user-defined-functions",
    "title": "User-Defined Functions (UDFs)",
    "category": "Functions",
    "difficulty": "Advanced",
    "estimatedTime": "25 min",
    "starterQuery": "/* This lesson is theoretical as SQLite has limited UDF support. */\n-- The examples below use PostgreSQL or T-SQL syntax.",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What are User-Defined Functions (UDFs)?\nA UDF is a custom function you create to perform a specific action. It allows you to extend the database's built-in functionality by encapsulating reusable logic. Think of it as creating your own shortcut for complex operations."
        },
        {
            "type": "paragraph",
            "text": "2. Why create a UDF?\nUDFs are created to simplify complex calculations, enforce consistent business logic, and make queries more readable. For example, you could create a function `calculate_final_price(price, tax_rate)` so you don't have to write the formula `price * (1 + tax_rate)` in every single query."
        },
        {
            "type": "paragraph",
            "text": "3. What are the common types of UDFs?\nThe most common type is a 'Scalar Function', which takes one or more parameters and returns a single value (e.g., a number, string, or date). Other advanced types, like 'Table-Valued Functions', can return an entire table of data."
        },
        {
            "type": "paragraph",
            "text": "4. What is the syntax? (PostgreSQL Example)\nThe syntax varies between database systems. In PostgreSQL, you use the `CREATE FUNCTION` statement. You must define the function name, its parameters (with their data types), the return type, and the language (like `plpgsql`, the standard procedural language for PostgreSQL)."
        },
        {
            "type": "code",
            "text": "-- PostgreSQL Example: A function to calculate a discounted price\nCREATE FUNCTION calculate_discounted_price(price NUMERIC, discount_percent INT)\nRETURNS NUMERIC AS $$\nBEGIN\n    RETURN price - (price * discount_percent / 100);\nEND;\n$$ LANGUAGE plpgsql;\n\n-- How to use the function in a query:\nSELECT \n  product_name, \n  price, \n  calculate_discounted_price(price, 15) AS discounted_price\nFROM products;\n"
        },
        {
            "type": "note",
            "text": "While powerful, overusing UDFs (especially scalar ones) inside a `WHERE` clause can sometimes slow down query performance. It's important to use them wisely."
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "products",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "product_name",
                        "type": "TEXT"
                    },
                    {
                        "name": "price",
                        "type": "NUMERIC"
                    }
                ]
            },
            {
                "name": "employees",
                "columns": [
                    {
                        "name": "id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "first_name",
                        "type": "TEXT"
                    },
                    {
                        "name": "last_name",
                        "type": "TEXT"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "products": [
            {
                "id": 1,
                "product_name": "Laptop",
                "price": 1200.0
            },
            {
                "id": 2,
                "product_name": "Monitor",
                "price": 300.0
            },
            {
                "id": 3,
                "product_name": "Keyboard",
                "price": 75.0
            }
        ],
        "employees": [
            {
                "id": 1,
                "first_name": "Alice",
                "last_name": "Smith"
            },
            {
                "id": 2,
                "first_name": "Bob",
                "last_name": "Johnson"
            }
        ]
    },
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic User-Defined Functions (UDFs) Query",
            "description": "Practice the fundamental concepts of User-Defined Functions (UDFs).",
            "starterCode": "-- Practice User-Defined Functions (UDFs)\n-- Write your query here",
            "solution": "-- Solution will depend on the specific User-Defined Functions (UDFs) lesson",
            "hint": "Review the User-Defined Functions (UDFs) syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating User-Defined Functions (UDFs) functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate User-Defined Functions (UDFs)",
            "description": "Apply User-Defined Functions (UDFs) with additional complexity.",
            "starterCode": "-- Intermediate User-Defined Functions (UDFs) practice\n-- Your code here",
            "solution": "-- More complex User-Defined Functions (UDFs) solution",
            "hint": "Combine User-Defined Functions (UDFs) with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using User-Defined Functions (UDFs)."
        },
        {
            "id": "practice_3",
            "title": "Advanced User-Defined Functions (UDFs)",
            "description": "Master advanced User-Defined Functions (UDFs) techniques.",
            "starterCode": "-- Advanced User-Defined Functions (UDFs) practice\n-- Your advanced query here",
            "solution": "-- Advanced User-Defined Functions (UDFs) solution",
            "hint": "Think about edge cases and optimization for User-Defined Functions (UDFs).",
            "expectedOutput": "Advanced User-Defined Functions (UDFs) results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world User-Defined Functions (UDFs)",
            "description": "Apply User-Defined Functions (UDFs) to solve a realistic business problem.",
            "starterCode": "-- Real-world User-Defined Functions (UDFs) scenario\n-- Solve the business problem",
            "solution": "-- Business-focused User-Defined Functions (UDFs) solution",
            "hint": "Consider how User-Defined Functions (UDFs) would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "quiz": [
        {
            "id": "user-defined-functions_q1",
            "type": "mcq",
            "question": "What is the primary purpose of User-Defined Functions (UDFs)?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement User-Defined Functions (UDFs) functionality",
                "To create database backups"
            ],
            "answer": "To implement User-Defined Functions (UDFs) functionality",
            "explanation": "User-Defined Functions (UDFs) is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "user-defined-functions_q2",
            "type": "truefalse",
            "question": "User-Defined Functions (UDFs) can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including User-Defined Functions (UDFs) can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "user-defined-functions_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using User-Defined Functions (UDFs)?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using User-Defined Functions (UDFs), you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "user-defined-functions_q4",
            "type": "truefalse",
            "question": "User-Defined Functions (UDFs) is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "user-defined-functions_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with User-Defined Functions (UDFs)?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "user-defined-functions_q6",
            "type": "mcq",
            "question": "When learning User-Defined Functions (UDFs), what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "user-defined-functions_q7",
            "type": "truefalse",
            "question": "Understanding User-Defined Functions (UDFs) is important for database professionals.",
            "answer": true,
            "explanation": "User-Defined Functions (UDFs) is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "user-defined-functions_q8",
            "type": "mcq",
            "question": "What should you do before using User-Defined Functions (UDFs) in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "udf_ch1",
            "title": "Design a Full Name Formatter",
            "steps": [
                {
                    "stepId": "udf_ch1_step1",
                    "description": "Write the conceptual `CREATE FUNCTION` statement (using PostgreSQL syntax) for a UDF named `format_full_name`. It should accept two text parameters, `first_name` and `last_name`, and return a single text value.",
                    "solution": "CREATE FUNCTION format_full_name(first_name TEXT, last_name TEXT) RETURNS TEXT AS $$"
                },
                {
                    "stepId": "udf_ch1_step2",
                    "description": "Inside the function body, write the logic to concatenate the names in the format 'LastName, FirstName'.",
                    "solution": "BEGIN RETURN last_name || ', ' || first_name; END; $$ LANGUAGE plpgsql;"
                }
            ]
        },
        {
            "id": "udf_ch2",
            "title": "Design a Tax Calculator",
            "steps": [
                {
                    "stepId": "udf_ch2_step1",
                    "description": "Write the conceptual `CREATE FUNCTION` statement for a UDF named `calculate_final_price`. It should accept a numeric `base_price` and a numeric `tax_rate` (e.g., 0.08 for 8%). It should return a numeric value.",
                    "solution": "CREATE FUNCTION calculate_final_price(base_price NUMERIC, tax_rate NUMERIC) RETURNS NUMERIC AS $$"
                },
                {
                    "stepId": "udf_ch2_step2",
                    "description": "Write the function body logic to calculate the price including tax.",
                    "solution": "BEGIN RETURN base_price * (1 + tax_rate); END; $$ LANGUAGE plpgsql;"
                }
            ]
        }
    ]
}