{
    "id": "indexes",
    "title": "Indexes",
    "category": "Data Definition",
    "difficulty": "Intermediate",
    "estimatedTime": "15 min",
    "starterQuery": "/* Let's add an index to speed up searches on the 'users' table. */\n\nCREATE INDEX idx_lastname ON users (last_name);",
    "theory": [
        {
            "type": "paragraph",
            "text": "1. What is an INDEX?\nAn `INDEX` is a special lookup table that the database search engine can use to speed up data retrieval. Think of it like the index at the back of a book: instead of searching through every page (every row), the database can use the index to go directly to the information it needs."
        },
        {
            "type": "paragraph",
            "text": "2. Why use an INDEX?\nThe primary purpose of an index is to improve query performance. Queries that filter or sort on indexed columns are significantly faster, especially on large tables. Without an index, the database has to do a 'full table scan', reading every single row to find matching data."
        },
        {
            "type": "paragraph",
            "text": "3. What is the downside?\nWhile indexes speed up data retrieval (`SELECT`), they can slow down data modification (`INSERT`, `UPDATE`, `DELETE`). This is because every time you change data, the database must also update the index. Therefore, you should only create indexes on columns that are frequently used in `WHERE` clauses or `JOIN` conditions."
        },
        {
            "type": "paragraph",
            "text": "4. What is the syntax?\nThe syntax to create an index is `CREATE INDEX index_name ON table_name (column1, column2, ...);`. You give the index a unique name and specify the table and the column(s) to be indexed."
        }
    ],
    "schema": {
        "tables": [
            {
                "name": "users",
                "columns": [
                    {
                        "name": "user_id",
                        "type": "INTEGER",
                        "constraints": "PRIMARY KEY"
                    },
                    {
                        "name": "first_name",
                        "type": "TEXT"
                    },
                    {
                        "name": "last_name",
                        "type": "TEXT"
                    },
                    {
                        "name": "email",
                        "type": "TEXT"
                    }
                ]
            }
        ]
    },
    "sample_data": {
        "users": [
            {
                "user_id": 1,
                "first_name": "John",
                "last_name": "Smith",
                "email": "john.s@email.com"
            },
            {
                "user_id": 2,
                "first_name": "Jane",
                "last_name": "Doe",
                "email": "jane.d@email.com"
            },
            {
                "user_id": 3,
                "first_name": "Peter",
                "last_name": "Jones",
                "email": "peter.j@email.com"
            }
        ]
    },
    "practice": [
        {
            "id": "practice_1",
            "title": "Basic Indexes Query",
            "description": "Practice the fundamental concepts of Indexes.",
            "starterCode": "-- Practice Indexes\n-- Write your query here",
            "solution": "-- Solution will depend on the specific Indexes lesson",
            "hint": "Review the Indexes syntax and examples from the theory section.",
            "expectedOutput": "Results demonstrating Indexes functionality."
        },
        {
            "id": "practice_2",
            "title": "Intermediate Indexes",
            "description": "Apply Indexes with additional complexity.",
            "starterCode": "-- Intermediate Indexes practice\n-- Your code here",
            "solution": "-- More complex Indexes solution",
            "hint": "Combine Indexes with other SQL concepts you've learned.",
            "expectedOutput": "More complex results using Indexes."
        },
        {
            "id": "practice_3",
            "title": "Advanced Indexes",
            "description": "Master advanced Indexes techniques.",
            "starterCode": "-- Advanced Indexes practice\n-- Your advanced query here",
            "solution": "-- Advanced Indexes solution",
            "hint": "Think about edge cases and optimization for Indexes.",
            "expectedOutput": "Advanced Indexes results with optimized performance."
        },
        {
            "id": "practice_4",
            "title": "Real-world Indexes",
            "description": "Apply Indexes to solve a realistic business problem.",
            "starterCode": "-- Real-world Indexes scenario\n-- Solve the business problem",
            "solution": "-- Business-focused Indexes solution",
            "hint": "Consider how Indexes would be used in actual database applications.",
            "expectedOutput": "Practical results that solve real business needs."
        }
    ],
    "quiz": [
        {
            "id": "indexes_q1",
            "type": "mcq",
            "question": "What is the primary purpose of Indexes?",
            "options": [
                "To modify table structure",
                "To query data from tables",
                "To implement Indexes functionality",
                "To create database backups"
            ],
            "answer": "To implement Indexes functionality",
            "explanation": "Indexes is specifically designed to handle its particular SQL functionality as described in the lesson."
        },
        {
            "id": "indexes_q2",
            "type": "truefalse",
            "question": "Indexes can be used with other SQL clauses and commands.",
            "answer": true,
            "explanation": "Most SQL commands including Indexes can be combined with other clauses to create more powerful and specific queries."
        },
        {
            "id": "indexes_q3",
            "type": "mcq",
            "question": "Which of the following is a key consideration when using Indexes?",
            "options": [
                "Performance impact",
                "Data accuracy",
                "Syntax correctness",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "When using Indexes, you should always consider performance, data accuracy, and correct syntax to ensure optimal results."
        },
        {
            "id": "indexes_q4",
            "type": "truefalse",
            "question": "Indexes is supported by all SQL database systems.",
            "answer": false,
            "explanation": "Different SQL database systems may have variations in syntax and support for various SQL features. Always check your specific database documentation."
        },
        {
            "id": "indexes_q5",
            "type": "mcq",
            "question": "What happens if you use incorrect syntax with Indexes?",
            "options": [
                "The query runs with default values",
                "The database crashes",
                "You get a syntax error",
                "The query is automatically corrected"
            ],
            "answer": "You get a syntax error",
            "explanation": "SQL databases will return syntax errors when commands are not properly formatted, helping you identify and fix issues."
        },
        {
            "id": "indexes_q6",
            "type": "mcq",
            "question": "When learning Indexes, what is the best practice?",
            "options": [
                "Memorize all syntax variations",
                "Practice with real examples",
                "Only read the documentation",
                "Skip the fundamentals"
            ],
            "answer": "Practice with real examples",
            "explanation": "Hands-on practice with real examples is the most effective way to master SQL concepts and build practical skills."
        },
        {
            "id": "indexes_q7",
            "type": "truefalse",
            "question": "Understanding Indexes is important for database professionals.",
            "answer": true,
            "explanation": "Indexes is a fundamental SQL concept that database professionals should understand to work effectively with databases."
        },
        {
            "id": "indexes_q8",
            "type": "mcq",
            "question": "What should you do before using Indexes in a production environment?",
            "options": [
                "Test it thoroughly",
                "Read the documentation",
                "Understand the impact",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Before using any SQL command in production, you should test thoroughly, read documentation, and understand the potential impact on your system."
        }
    ],
    "challenges": [
        {
            "id": "indexes_ch1",
            "title": "Index a Foreign Key",
            "steps": [
                {
                    "stepId": "indexes_ch1_step1",
                    "description": "It's a best practice to create an index on foreign key columns. Imagine an `orders` table with a `customer_id` foreign key. Write the command to create an index named `idx_customer_id` on that column.",
                    "solution": "CREATE INDEX idx_customer_id ON orders (customer_id);"
                }
            ]
        },
        {
            "id": "indexes_ch2",
            "title": "Create a Unique Index",
            "steps": [
                {
                    "stepId": "indexes_ch2_step1",
                    "description": "You can create an index that also enforces uniqueness. Write the command to create a unique index named `uidx_email` on the `email` column of the `users` table.",
                    "solution": "CREATE UNIQUE INDEX uidx_email ON users (email);"
                }
            ]
        }
    ]
}